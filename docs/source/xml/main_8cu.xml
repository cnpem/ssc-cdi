<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="main_8cu" kind="file" language="C++">
    <compoundname>main.cu</compoundname>
    <includes local="yes">complex.hpp</includes>
    <includes refid="ptycho_8hpp" local="yes">ptycho.hpp</includes>
    <includes local="no">execinfo.h</includes>
    <includes local="no">signal.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">numeric</includes>
    <incdepgraph>
      <node id="1">
        <label>/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu</label>
        <link refid="main_8cu"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>common/complex.hpp</label>
      </node>
      <node id="9">
        <label>cufft.h</label>
      </node>
      <node id="13">
        <label>stdlib.h</label>
      </node>
      <node id="2">
        <label>complex.hpp</label>
      </node>
      <node id="15">
        <label>numeric</label>
      </node>
      <node id="8">
        <label>propagator.hpp</label>
        <link refid="propagator_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>unistd.h</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="12">
        <label>signal.h</label>
      </node>
      <node id="3">
        <label>ptycho.hpp</label>
        <link refid="ptycho_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cstddef</label>
      </node>
      <node id="10">
        <label>types.hpp</label>
      </node>
      <node id="11">
        <label>execinfo.h</label>
      </node>
      <node id="7">
        <label>common/types.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="structInitializer" prot="public">Initializer</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="main_8cu_1a29b1f85f7344fe5fa75bf4ff6ae4aac0" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool accessEnabled[16][16]</definition>
        <argsstring>[16][16]</argsstring>
        <name>accessEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" line="10" column="6" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cu_1a4b1e304ff82fcb194c5396c285f9ddf1" prot="public" static="no" mutable="no">
        <type><ref refid="structInitializer" kindref="compound">Initializer</ref></type>
        <definition>Initializer init</definition>
        <argsstring></argsstring>
        <name>init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" line="213" column="13" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" bodystart="213" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="main_8cu_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" line="4" column="5" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" bodystart="4" bodyend="7"/>
      </memberdef>
      <memberdef kind="function" id="main_8cu_1a7901e14f413d2c19f8add5823d90d855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EnablePeerToPeer</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;gpus)</argsstring>
        <name>EnablePeerToPeer</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>gpus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" line="13" column="10" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" bodystart="13" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="main_8cu_1a6355ae1c07dad5b070db411cd9f9dbd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DisablePeerToPeer</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;gpus)</argsstring>
        <name>DisablePeerToPeer</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>gpus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" line="43" column="10" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" bodystart="43" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="main_8cu_1ac034eeceabbdc2b1f6842383fefca05f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void glcall</definition>
        <argsstring>(void *cpuobj, void *cpuprobe, void *cpudif, int psizex, int osizex, int osizey, int dsizex, void *cpurois, int numrois, int bsize, int numiter, int ngpus, int *cpugpus, float *rfactors, float objbeta, float probebeta, int psizez, float *objsupport, float *probesupport, int numobjsupport, float *sigmask, int geometricsteps, float step_obj, float step_probe, float reg_obj, float reg_probe, float *background, float probef1)</argsstring>
        <name>glcall</name>
        <param>
          <type>void *</type>
          <declname>cpuobj</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cpuprobe</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cpudif</declname>
        </param>
        <param>
          <type>int</type>
          <declname>psizex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>osizex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>osizey</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dsizex</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cpurois</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numrois</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numiter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngpus</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>cpugpus</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>rfactors</declname>
        </param>
        <param>
          <type>float</type>
          <declname>objbeta</declname>
        </param>
        <param>
          <type>float</type>
          <declname>probebeta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>psizez</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>objsupport</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>probesupport</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numobjsupport</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sigmask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>geometricsteps</declname>
        </param>
        <param>
          <type>float</type>
          <declname>step_obj</declname>
        </param>
        <param>
          <type>float</type>
          <declname>step_probe</declname>
        </param>
        <param>
          <type>float</type>
          <declname>reg_obj</declname>
        </param>
        <param>
          <type>float</type>
          <declname>reg_probe</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>background</declname>
        </param>
        <param>
          <type>float</type>
          <declname>probef1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" line="60" column="10" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" bodystart="60" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="main_8cu_1a05329080d70d159786daebc16241e286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void piecall</definition>
        <argsstring>(void *cpuobj, int osizex, int osizey, void *cpuprobe, int psizex, int psizez, void *cpudif, int dsizex, void *cpurois, int numrois, void *sigmask, int numiter, int *cpugpus, int ngpus, float *rfactors, float step_object, float step_probe, float reg_obj, float reg_probe)</argsstring>
        <name>piecall</name>
        <param>
          <type>void *</type>
          <declname>cpuobj</declname>
        </param>
        <param>
          <type>int</type>
          <declname>osizex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>osizey</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cpuprobe</declname>
        </param>
        <param>
          <type>int</type>
          <declname>psizex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>psizez</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cpudif</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dsizex</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cpurois</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numrois</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>sigmask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numiter</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>cpugpus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngpus</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>rfactors</declname>
        </param>
        <param>
          <type>float</type>
          <declname>step_object</declname>
        </param>
        <param>
          <type>float</type>
          <declname>step_probe</declname>
        </param>
        <param>
          <type>float</type>
          <declname>reg_obj</declname>
        </param>
        <param>
          <type>float</type>
          <declname>reg_probe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" line="84" column="10" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" bodystart="84" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="main_8cu_1a18169326e33aaab8d5c9cff5bc5d4b1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void raarcall</definition>
        <argsstring>(void *cpuobj, void *cpuprobe, void *cpudif, int psizex, int osizex, int osizey, int dsizex, void *cpurois, int numrois, int bsize, int numiter, int ngpus, int *cpugpus, float *rfactors, float objbeta, float probebeta, int psizez, float *objsupport, float *probesupport, int numobjsupport, float *sigmask, int geometricsteps, float step_obj, float step_probe, float reg_obj, float reg_probe, float *background, float probef1, float raarbeta)</argsstring>
        <name>raarcall</name>
        <param>
          <type>void *</type>
          <declname>cpuobj</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cpuprobe</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cpudif</declname>
        </param>
        <param>
          <type>int</type>
          <declname>psizex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>osizex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>osizey</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dsizex</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cpurois</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numrois</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numiter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngpus</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>cpugpus</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>rfactors</declname>
        </param>
        <param>
          <type>float</type>
          <declname>objbeta</declname>
        </param>
        <param>
          <type>float</type>
          <declname>probebeta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>psizez</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>objsupport</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>probesupport</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numobjsupport</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sigmask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>geometricsteps</declname>
        </param>
        <param>
          <type>float</type>
          <declname>step_obj</declname>
        </param>
        <param>
          <type>float</type>
          <declname>step_probe</declname>
        </param>
        <param>
          <type>float</type>
          <declname>reg_obj</declname>
        </param>
        <param>
          <type>float</type>
          <declname>reg_probe</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>background</declname>
        </param>
        <param>
          <type>float</type>
          <declname>probef1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>raarbeta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" line="130" column="10" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" bodystart="130" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="main_8cu_1a5d5a0c1ac1384b740a567e391a24eaa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _fhandler</definition>
        <argsstring>(int signo, siginfo_t *info, void *extra)</argsstring>
        <name>_fhandler</name>
        <param>
          <type>int</type>
          <declname>signo</declname>
        </param>
        <param>
          <type>siginfo_t *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>extra</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" line="164" column="10" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" bodystart="164" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="main_8cu_1a44c56a5229184dc85679d32920473c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _setHandler</definition>
        <argsstring>(void(*handler)(int, siginfo_t *, void *))</argsstring>
        <name>_setHandler</name>
        <param>
          <type>void(*)(int, siginfo_t *, void *)</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" line="170" column="10" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" bodystart="170" bodyend="192"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;complex.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ptycho_8hpp" kindref="compound">ptycho.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cu_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()</highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="7"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cu_1a29b1f85f7344fe5fa75bf4ff6ae4aac0" kindref="member">accessEnabled</ref>[16][16];</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cu_1a7901e14f413d2c19f8add5823d90d855" kindref="member">EnablePeerToPeer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>gpus)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g<sp/>:<sp/>gpus)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaSetDevice(g);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g2<sp/>:<sp/>gpus)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g2<sp/>!=<sp/>g<sp/>&amp;&amp;<sp/>!<ref refid="main_8cu_1a29b1f85f7344fe5fa75bf4ff6ae4aac0" kindref="member">accessEnabled</ref>[g][g2])<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>can_acess;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_cuda_check(<sp/>cudaDeviceCanAccessPeer(&amp;can_acess,<sp/>g,<sp/>g2)<sp/>);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!can_acess)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_warning(format(</highlight><highlight class="stringliteral">&quot;Warning:<sp/>GPU<sp/>{}<sp/>cant<sp/>access<sp/>GPU<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>g,<sp/>g2));</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaError_t<sp/>cerror<sp/>=<sp/>cudaDeviceEnablePeerAccess(g2,<sp/>0);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>cerror<sp/>==<sp/>cudaSuccess<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8cu_1a29b1f85f7344fe5fa75bf4ff6ae4aac0" kindref="member">accessEnabled</ref>[g][g2]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_debug(format(</highlight><highlight class="stringliteral">&quot;P2P<sp/>access<sp/>enabled:<sp/>{}<sp/>&lt;-&gt;<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>g,<sp/>g2));</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cerror<sp/>==<sp/>cudaErrorPeerAccessAlreadyEnabled)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_debug(format(</highlight><highlight class="stringliteral">&quot;GPU<sp/>{}<sp/>already<sp/>has<sp/>access<sp/>to<sp/>GPU<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>g,<sp/>g2));</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_cuda_check(<sp/>cerror<sp/>);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cu_1a6355ae1c07dad5b070db411cd9f9dbd6" kindref="member">DisablePeerToPeer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>gpus)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numgpus;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaGetDeviceCount(&amp;numgpus);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g<sp/>:<sp/>gpus)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaSetDevice(g);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g2<sp/>:<sp/>gpus)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g2<sp/>!=<sp/>g<sp/>&amp;&amp;<sp/><ref refid="main_8cu_1a29b1f85f7344fe5fa75bf4ff6ae4aac0" kindref="member">accessEnabled</ref>[g][g2])<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_cuda_check(<sp/>cudaDeviceDisablePeerAccess(g2)<sp/>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_debug(format(</highlight><highlight class="stringliteral">&quot;P2P<sp/>access<sp/>disabled:<sp/>{}<sp/>&lt;-&gt;<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>g,<sp/>g2));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cu_1ac034eeceabbdc2b1f6842383fefca05f" kindref="member">glcall</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cpuobj,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cpuprobe,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cpudif,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psizex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>osizex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>osizey,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dsizex,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cpurois,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numrois,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numiter,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ngpus,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>cpugpus,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>rfactors,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>objbeta,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>probebeta,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psizez,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>objsupport,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>probesupport,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numobjsupport,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>sigmask,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>geometricsteps,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>step_obj,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>step_probe,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>reg_obj,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>reg_probe,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>background,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>probef1)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_info(format(</highlight><highlight class="stringliteral">&quot;Starting<sp/>AP<sp/>-<sp/>p:<sp/>{}<sp/>o:<sp/>{}<sp/>r:<sp/>{}<sp/>b:<sp/>{}<sp/>n:<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psizex,<sp/>osizex,<sp/>numrois,<sp/>bsize,<sp/>numiter));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>gpus;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g=0;<sp/>g&lt;ngpus;<sp/>g++)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpus.push_back(cpugpus[g]);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structGLim" kindref="compound">GLim</ref><sp/>*gl<sp/>=<sp/><ref refid="glim_8cu_1a0612533b823e68af91aedcf9d7c79dac" kindref="member">CreateGLim</ref>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)cpudif,<sp/>dim3(dsizex,dsizex,numrois),<sp/>(complex*)cpuprobe,<sp/>dim3(psizex,psizex,psizez),<sp/>(complex*)cpuobj,<sp/>dim3(osizex,<sp/>osizey),</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structROI" kindref="compound">ROI</ref>*)cpurois,<sp/>numrois,<sp/>bsize,<sp/>rfactors,<sp/>gpus,<sp/>objsupport,<sp/>probesupport,<sp/>numobjsupport,<sp/>sigmask,<sp/>geometricsteps,<sp/>background,<sp/>probef1,<sp/>step_obj,<sp/>step_probe,<sp/>reg_obj,<sp/>reg_probe);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gl-&gt;<ref refid="structGLim_1a8380dd0d1b45c249f8e0f15b216b8557" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a8dfd13763eaa2664e0f711bdf78435c2" kindref="member">objmomentum</ref><sp/>=<sp/>objbeta;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gl-&gt;<ref refid="structGLim_1a8380dd0d1b45c249f8e0f15b216b8557" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a36890b4c11b6e9ea9d0013acfa8015de" kindref="member">probemomentum</ref><sp/>=<sp/>probebeta;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glim_8cu_1a36e51ccd5aff171d0844107499c407f9" kindref="member">GLimRun</ref>(*gl,<sp/>numiter);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glim_8cu_1a0fd2fbf2ef23a7d9c8bdd81e5c7e1f75" kindref="member">DestroyGLim</ref>(gl);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_info(</highlight><highlight class="stringliteral">&quot;End<sp/>AP.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cu_1a05329080d70d159786daebc16241e286" kindref="member">piecall</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cpuobj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>osizex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>osizey,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cpuprobe,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psizex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psizez,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cpudif,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dsizex,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cpurois,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numrois,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>sigmask,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numiter,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>cpugpus,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ngpus,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>rfactors,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>step_object,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>step_probe,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>reg_obj,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>reg_probe)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_info(format(</highlight><highlight class="stringliteral">&quot;Starting<sp/>PIE<sp/>-<sp/>p:<sp/>{}<sp/>o:<sp/>{}<sp/>r:<sp/>{}<sp/>n:<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psizex,<sp/>osizex,<sp/>numrois,<sp/>numiter));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>gpus;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpus.reserve(ngpus);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g=0;<sp/>g&lt;ngpus;<sp/>g++)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpus.push_back(cpugpus[g]);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batchsize<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>geometricsteps<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numobjsupport<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>probef1<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>objsupport<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>probesupport<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>background<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPie" kindref="compound">Pie</ref>*<sp/>pie<sp/>=<sp/><ref refid="pie_8cu_1ad3eaf7b0e0d7a760572bb4a385d128d8" kindref="member">CreatePie</ref>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)cpudif,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim3(dsizex,dsizex,numrois),</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(complex*)cpuprobe,<sp/>dim3(psizex,psizex,psizez),</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(complex*)cpuobj,<sp/>dim3(osizex,<sp/>osizey),</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structROI" kindref="compound">ROI</ref>*)cpurois,<sp/>numrois,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batchsize,<sp/>rfactors,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpus,<sp/>objsupport,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probesupport,<sp/>numobjsupport,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)sigmask,<sp/>geometricsteps,<sp/>background,<sp/>probef1,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step_object,<sp/>step_probe,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_obj,<sp/>reg_probe);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pie_8cu_1ad47895342ed5f0c3d83376afa2e576ce" kindref="member">PieRun</ref>(*pie,<sp/>numiter);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pie_8cu_1a0c41d92a50ebf6984862d474545e5a34" kindref="member">DestroyPie</ref>(pie);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cu_1a18169326e33aaab8d5c9cff5bc5d4b1a" kindref="member">raarcall</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cpuobj,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cpuprobe,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cpudif,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psizex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>osizex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>osizey,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dsizex,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cpurois,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numrois,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numiter,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ngpus,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>cpugpus,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>rfactors,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>objbeta,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>probebeta,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psizez,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>objsupport,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>probesupport,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numobjsupport,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>sigmask,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>geometricsteps,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>step_obj,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>step_probe,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>reg_obj,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>reg_probe,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>background,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>probef1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>raarbeta)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_info(format(</highlight><highlight class="stringliteral">&quot;Starting<sp/>RAAR<sp/>-<sp/>p:<sp/>{}<sp/>o:<sp/>{}<sp/>r:<sp/>{}<sp/>b:<sp/>{}<sp/>n:<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psizex,<sp/>osizex,<sp/>numrois,<sp/>bsize,<sp/>numiter));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>gpus;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g=0;<sp/>g&lt;ngpus;<sp/>g++)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpus.push_back(cpugpus[g]);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structRAAR" kindref="compound">RAAR</ref>*<sp/>raar<sp/>=<sp/><ref refid="raar_8cu_1ae1b9df742b633f0babaef337af8b7ae9" kindref="member">CreateRAAR</ref>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)cpudif,<sp/>dim3(dsizex,dsizex,numrois),<sp/>(complex*)cpuprobe,<sp/>dim3(psizex,psizex,psizez),<sp/>(complex*)cpuobj,<sp/>dim3(osizex,<sp/>osizey),</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structROI" kindref="compound">ROI</ref>*)cpurois,<sp/>numrois,<sp/>bsize,<sp/>rfactors,<sp/>gpus,<sp/>objsupport,<sp/>probesupport,<sp/>numobjsupport,<sp/>sigmask,<sp/>geometricsteps,<sp/>background,<sp/>probef1,<sp/>step_obj,<sp/>step_probe,<sp/>reg_obj,<sp/>reg_probe);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raar-&gt;<ref refid="structRAAR_1a880063ae295e76c0944db229b10663d6" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a8dfd13763eaa2664e0f711bdf78435c2" kindref="member">objmomentum</ref><sp/>=<sp/>objbeta;<sp/></highlight><highlight class="comment">//<sp/>why<sp/>is<sp/>this<sp/>not<sp/>already<sp/>inside<sp/>CreateRAAR?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raar-&gt;<ref refid="structRAAR_1a880063ae295e76c0944db229b10663d6" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a36890b4c11b6e9ea9d0013acfa8015de" kindref="member">probemomentum</ref><sp/>=<sp/>probebeta;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="raar_8cu_1a5d561d117c49a8d76137081a17b0d58e" kindref="member">RAARRun</ref>(*raar,<sp/>numiter);<sp/></highlight><highlight class="comment">//<sp/>perhaps<sp/>objbeta<sp/>should<sp/>also<sp/>be<sp/>a<sp/><sp/>parameter<sp/>here,<sp/>since<sp/>it<sp/>works<sp/>like<sp/>tvmu<sp/>and<sp/>epsilon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="raar_8cu_1a63413b7b0c2a5b36b5595ff9a23ce9af" kindref="member">DestroyRAAR</ref>(raar);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_info(</highlight><highlight class="stringliteral">&quot;End<sp/>RAAR.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;execinfo.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cu_1a5d5a0c1ac1384b740a567e391a24eaa0" kindref="member">_fhandler</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signo,<sp/>siginfo_t<sp/>*info,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*extra)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>process<sp/>received<sp/>signal<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>signo<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>code<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>info-&gt;si_code<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cu_1a44c56a5229184dc85679d32920473c14" kindref="member">_setHandler</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*handler)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,siginfo_t<sp/>*,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>action;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action.sa_flags<sp/>=<sp/>SA_SIGINFO;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action.sa_sigaction<sp/>=<sp/>handler;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sigaction(SIGFPE,<sp/>&amp;action,<sp/>NULL)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;sigfpe:<sp/>sigaction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_exit(1);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sigaction(SIGSEGV,<sp/>&amp;action,<sp/>NULL)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;sigsegv:<sp/>sigaction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_exit(1);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sigaction(SIGILL,<sp/>&amp;action,<sp/>NULL)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;sigill:<sp/>sigaction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_exit(1);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sigaction(SIGBUS,<sp/>&amp;action,<sp/>NULL)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;sigbus:<sp/>sigaction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_exit(1);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="structInitializer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structInitializer" kindref="compound">Initializer</ref></highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structInitializer_1a7c6c773e821ac8125a842b46e0af706d" kindref="member">Initializer</ref>()</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<ref refid="main_8cu_1a29b1f85f7344fe5fa75bf4ff6ae4aac0" kindref="member">accessEnabled</ref>,0,256);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structInitializer_1add39a548b1e5405e938e786f069191e1" kindref="member">~Initializer</ref>()</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>gpus(16);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::iota(gpus.begin(),<sp/>gpus.end(),<sp/>0);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DisablePeerToPeer(gpus);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Disabled<sp/>P2P.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="211"><highlight class="normal">};</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><ref refid="structInitializer" kindref="compound">Initializer</ref><sp/><ref refid="main_8cu_1a4b1e304ff82fcb194c5396c285f9ddf1" kindref="member">init</ref>;</highlight></codeline>
    </programlisting>
    <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu"/>
  </compounddef>
</doxygen>
