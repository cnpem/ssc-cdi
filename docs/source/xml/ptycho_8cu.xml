<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="ptycho_8cu" kind="file" language="C++">
    <compoundname>ptycho.cu</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">common/types.hpp</includes>
    <includes local="no">common/logger.hpp</includes>
    <includes local="no">cstddef</includes>
    <includes local="yes">complex.hpp</includes>
    <includes refid="ptycho_8hpp" local="yes">ptycho.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu</label>
        <link refid="ptycho_8cu"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>common/complex.hpp</label>
      </node>
      <node id="11">
        <label>cufft.h</label>
      </node>
      <node id="6">
        <label>complex.hpp</label>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="10">
        <label>propagator.hpp</label>
        <link refid="propagator_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="4">
        <label>common/logger.hpp</label>
      </node>
      <node id="7">
        <label>ptycho.hpp</label>
        <link refid="ptycho_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cstddef</label>
      </node>
      <node id="12">
        <label>types.hpp</label>
      </node>
      <node id="3">
        <label>common/types.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="ptycho_8cu_1a4a8c6f0201de7bccf6e037ed753da4de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__global__ void</type>
        <definition>__global__ void KProjectPhiToProbe</definition>
        <argsstring>(const GArray&lt; complex &gt; probe, complex *probe_acc, float *probe_div, const GArray&lt; complex &gt; object, const GArray&lt; complex &gt; exitwave, const GArray&lt; ROI &gt; rois, bool bFTNorm, bool bIsGrad)</argsstring>
        <name>KProjectPhiToProbe</name>
        <param>
          <type>const GArray&lt; complex &gt;</type>
          <declname>probe</declname>
        </param>
        <param>
          <type>complex *</type>
          <declname>probe_acc</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>probe_div</declname>
        </param>
        <param>
          <type>const GArray&lt; complex &gt;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const GArray&lt; complex &gt;</type>
          <declname>exitwave</declname>
        </param>
        <param>
          <type>const GArray&lt; <ref refid="structROI" kindref="compound">ROI</ref> &gt;</type>
          <declname>rois</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bFTNorm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bIsGrad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" line="10" column="17" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" bodystart="10" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="ptycho_8cu_1a4da1e759b690c7f8a367d0624f5eaab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__global__ void</type>
        <definition>__global__ void KProjectPhiToProbe</definition>
        <argsstring>(const GArray&lt; complex &gt; probe, complex *probe_acc, float *probe_div, const GArray&lt; complex &gt; object, const GArray&lt; complex16 &gt; exitwave, const GArray&lt; ROI &gt; rois, bool bFTNorm, bool bIsGrad)</argsstring>
        <name>KProjectPhiToProbe</name>
        <param>
          <type>const GArray&lt; complex &gt;</type>
          <declname>probe</declname>
        </param>
        <param>
          <type>complex *</type>
          <declname>probe_acc</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>probe_div</declname>
        </param>
        <param>
          <type>const GArray&lt; complex &gt;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const GArray&lt; complex16 &gt;</type>
          <declname>exitwave</declname>
        </param>
        <param>
          <type>const GArray&lt; <ref refid="structROI" kindref="compound">ROI</ref> &gt;</type>
          <declname>rois</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bFTNorm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bIsGrad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" line="44" column="17" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" bodystart="44" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="ptycho_8cu_1a298859823914cec4625ac4a405426582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ProjectPhiToProbe</definition>
        <argsstring>(POptAlgorithm &amp;pt, int section, const MImage&lt; dtype &gt; &amp;Phi, bool bNormalizeFFT, bool bIsGradPm)</argsstring>
        <name>ProjectPhiToProbe</name>
        <param>
          <type><ref refid="structPOptAlgorithm" kindref="compound">POptAlgorithm</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>section</declname>
        </param>
        <param>
          <type>const MImage&lt; dtype &gt; &amp;</type>
          <declname>Phi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bNormalizeFFT</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bIsGradPm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" line="78" column="6" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" bodystart="78" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="ptycho_8cu_1a56c0632588ec47e287a6398368ceb7fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void ProjectPhiToProbe&lt; complex &gt;</definition>
        <argsstring>(POptAlgorithm &amp;pt, int section, const cMImage &amp;Phi, bool bNormalizeFFT, bool bIsGradPm)</argsstring>
        <name>ProjectPhiToProbe&lt; complex &gt;</name>
        <param>
          <type><ref refid="structPOptAlgorithm" kindref="compound">POptAlgorithm</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>section</declname>
        </param>
        <param>
          <type>const cMImage &amp;</type>
          <declname>Phi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bNormalizeFFT</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bIsGradPm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" line="90" column="10" declfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" declline="90" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ptycho_8cu_1a521bcc16a4fddac813e303a422e23cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void ProjectPhiToProbe&lt; complex16 &gt;</definition>
        <argsstring>(POptAlgorithm &amp;pt, int section, const hcMImage &amp;Phi, bool bNormalizeFFT, bool bIsGradPm)</argsstring>
        <name>ProjectPhiToProbe&lt; complex16 &gt;</name>
        <param>
          <type><ref refid="structPOptAlgorithm" kindref="compound">POptAlgorithm</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>section</declname>
        </param>
        <param>
          <type>const hcMImage &amp;</type>
          <declname>Phi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bNormalizeFFT</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bIsGradPm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" line="92" column="10" declfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" declline="92" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ptycho_8cu_1a7901e14f413d2c19f8add5823d90d855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EnablePeerToPeer</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;gpus)</argsstring>
        <name>EnablePeerToPeer</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>gpus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" line="95" column="10" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" bodystart="13" bodyend="41" declfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" declline="95" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ptycho_8cu_1a6355ae1c07dad5b070db411cd9f9dbd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DisablePeerToPeer</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;gpus)</argsstring>
        <name>DisablePeerToPeer</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>gpus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" line="96" column="10" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/main.cu" bodystart="43" bodyend="55" declfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" declline="96" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ptycho_8cu_1ab258760e7cc02ace89258a7460e9e0d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__global__ void</type>
        <definition>__global__ void k_project_reciprocal_space</definition>
        <argsstring>(GArray&lt; complex &gt; exitwave, const GArray&lt; float &gt; difpads, float *rfactors, size_t upsample, size_t nummodes, const GArray&lt; float &gt; _sigmask, int geometricsteps, bool bIsGrad, const float *background, float *bkgaccum)</argsstring>
        <name>k_project_reciprocal_space</name>
        <param>
          <type>GArray&lt; complex &gt;</type>
          <declname>exitwave</declname>
        </param>
        <param>
          <type>const GArray&lt; float &gt;</type>
          <declname>difpads</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>rfactors</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>upsample</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nummodes</declname>
        </param>
        <param>
          <type>const GArray&lt; float &gt;</type>
          <declname>_sigmask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>geometricsteps</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bIsGrad</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>background</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>bkgaccum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" line="99" column="21" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" bodystart="99" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="ptycho_8cu_1a5d0e3f4192830fa314a9b15975d8bb2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IndexRois</definition>
        <argsstring>(ROI *rois, int numrois)</argsstring>
        <name>IndexRois</name>
        <param>
          <type><ref refid="structROI" kindref="compound">ROI</ref> *</type>
          <declname>rois</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numrois</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" line="183" column="6" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" bodystart="183" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="ptycho_8cu_1ad878deb8a9ac1ae105af1be65e74e3de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void project_reciprocal_space</definition>
        <argsstring>(POptAlgorithm &amp;pt, rImage *difpad, int g, bool bIsGradPm)</argsstring>
        <name>project_reciprocal_space</name>
        <param>
          <type><ref refid="structPOptAlgorithm" kindref="compound">POptAlgorithm</ref> &amp;</type>
          <declname>ptycho</declname>
          <defname>pt</defname>
        </param>
        <param>
          <type>rImage *</type>
          <declname>difpads</declname>
          <defname>difpad</defname>
        </param>
        <param>
          <type>int</type>
          <declname>g</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isGradPm</declname>
          <defname>bIsGradPm</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fourier project exitwaves from a given section of the list. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" line="188" column="6" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" bodystart="188" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="ptycho_8cu_1a3760b1da2405731ddcbe4728535475fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ApplyProbeUpdate</definition>
        <argsstring>(POptAlgorithm &amp;pt, cImage &amp;velocity, float stepsize, float momentum, float epsilon)</argsstring>
        <name>ApplyProbeUpdate</name>
        <param>
          <type><ref refid="structPOptAlgorithm" kindref="compound">POptAlgorithm</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>cImage &amp;</type>
          <declname>velocity</declname>
        </param>
        <param>
          <type>float</type>
          <declname>stepsize</declname>
        </param>
        <param>
          <type>float</type>
          <declname>momentum</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" line="214" column="6" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" bodystart="214" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="ptycho_8cu_1a5b112da7aae5c2cf748894fffcca3056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DestroyPOptAlgorithm</definition>
        <argsstring>(POptAlgorithm *&amp;ptycho_ref)</argsstring>
        <name>DestroyPOptAlgorithm</name>
        <param>
          <type><ref refid="structPOptAlgorithm" kindref="compound">POptAlgorithm</ref> *&amp;</type>
          <declname>ptycho_ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" line="240" column="6" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" bodystart="240" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="ptycho_8cu_1ac6d77be77215d1df299307ef6a2175dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structPOptAlgorithm" kindref="compound">POptAlgorithm</ref> *</type>
        <definition>POptAlgorithm* CreatePOptAlgorithm</definition>
        <argsstring>(float *_difpads, const dim3 &amp;difshape, complex *_probe, const dim3 &amp;probeshape, complex *_object, const dim3 &amp;objshape, ROI *_rois, int numrois, int batchsize, float *_rfact, const std::vector&lt; int &gt; &amp;gpus, float *_objectsupport, float *_probesupport, int numobjsupp, float *_sigmask, int geometricsteps, float *background, float probef1, float step_obj, float step_probe, float reg_obj, float reg_probe)</argsstring>
        <name>CreatePOptAlgorithm</name>
        <param>
          <type>float *</type>
          <declname>_difpads</declname>
        </param>
        <param>
          <type>const dim3 &amp;</type>
          <declname>difshape</declname>
        </param>
        <param>
          <type>complex *</type>
          <declname>_probe</declname>
        </param>
        <param>
          <type>const dim3 &amp;</type>
          <declname>probeshape</declname>
        </param>
        <param>
          <type>complex *</type>
          <declname>_object</declname>
        </param>
        <param>
          <type>const dim3 &amp;</type>
          <declname>objshape</declname>
        </param>
        <param>
          <type><ref refid="structROI" kindref="compound">ROI</ref> *</type>
          <declname>_rois</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numrois</declname>
        </param>
        <param>
          <type>int</type>
          <declname>batchsize</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>_rfact</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>gpus</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>_objectsupport</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>_probesupport</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numobjsupp</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>_sigmask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>geometricsteps</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>background</declname>
        </param>
        <param>
          <type>float</type>
          <declname>probef1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>step_obj</declname>
        </param>
        <param>
          <type>float</type>
          <declname>step_probe</declname>
        </param>
        <param>
          <type>float</type>
          <declname>reg_obj</declname>
        </param>
        <param>
          <type>float</type>
          <declname>reg_probe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" line="302" column="15" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu" bodystart="302" bodyend="421"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;common/types.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;common/logger.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;complex.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ptycho_8hpp" kindref="compound">ptycho.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ptycho_8cu_1a4a8c6f0201de7bccf6e037ed753da4de" kindref="member">KProjectPhiToProbe</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GArray&lt;complex&gt;<sp/>probe,<sp/>complex*<sp/>probe_acc,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>probe_div,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GArray&lt;complex&gt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GArray&lt;complex&gt;<sp/>exitwave,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GArray&lt;ROI&gt;<sp/>rois,</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bFTNorm,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bIsGrad)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>blockIdx.x<sp/>*<sp/>blockDim.x<sp/>+<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idy<sp/>=<sp/>blockIdx.y<sp/>*<sp/>blockDim.y<sp/>+<sp/>threadIdx.y;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;=<sp/>probe.shape.x)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/>pacc<sp/>=<sp/>complex(0);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pdiv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>roi<sp/>=<sp/>0;<sp/>roi<sp/>&lt;<sp/>rois.shape.z;<sp/>roi++)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>rois.shape.x;<sp/>p++)<sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>flyscan<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objposx<sp/>=<sp/>idx<sp/>+<sp/>(int)rois(roi,<sp/>0,<sp/>p).x;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objposy<sp/>=<sp/>idy<sp/>+<sp/>(int)rois(roi,<sp/>0,<sp/>p).y;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/>obj<sp/>=<sp/>object(objposy,<sp/>objposx);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/>ew<sp/>=<sp/>exitwave((roi<sp/>*<sp/>rois.shape.x<sp/>+<sp/>p)<sp/>*<sp/>probe.shape.z<sp/>+<sp/>blockIdx.z,<sp/>idy,<sp/>idx);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pacc<sp/>+=<sp/>ew<sp/>*<sp/>obj.conj();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdiv<sp/>+=<sp/>obj.abs2();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>blockIdx.z<sp/>*<sp/>probe.shape.x<sp/>*<sp/>probe.shape.y<sp/>+<sp/>idy<sp/>*<sp/>probe.shape.x<sp/>+<sp/>idx;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bFTNorm)<sp/>pacc<sp/>/=<sp/>(float)(probe.shape.x<sp/>*<sp/>probe.shape.y);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bIsGrad)<sp/>pacc<sp/>-=<sp/>probe[index]<sp/>*<sp/>pdiv;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>probe_acc[index]<sp/>+=<sp/>pacc;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>probe_div[index]<sp/>+=<sp/>pdiv;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>kernel<sp/>code<sp/>is<sp/>replicated<sp/>for<sp/>complex16,<sp/>for<sp/>some<sp/>reason<sp/>cuda<sp/>was<sp/>not<sp/>playing<sp/>well<sp/>with<sp/>explicit<sp/>instantiation<sp/>on<sp/>gpu<sp/>kernels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ptycho_8cu_1a4a8c6f0201de7bccf6e037ed753da4de" kindref="member">KProjectPhiToProbe</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GArray&lt;complex&gt;<sp/>probe,<sp/>complex*<sp/>probe_acc,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>probe_div,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GArray&lt;complex&gt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GArray&lt;complex16&gt;<sp/>exitwave,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GArray&lt;ROI&gt;<sp/>rois,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bFTNorm,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bIsGrad)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>blockIdx.x<sp/>*<sp/>blockDim.x<sp/>+<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idy<sp/>=<sp/>blockIdx.y<sp/>*<sp/>blockDim.y<sp/>+<sp/>threadIdx.y;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;=<sp/>probe.shape.x)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/>pacc<sp/>=<sp/>complex(0);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pdiv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>roi<sp/>=<sp/>0;<sp/>roi<sp/>&lt;<sp/>rois.shape.z;<sp/>roi++)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>rois.shape.x;<sp/>p++)<sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>flyscan<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objposx<sp/>=<sp/>idx<sp/>+<sp/>(int)rois(roi,<sp/>0,<sp/>p).x;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objposy<sp/>=<sp/>idy<sp/>+<sp/>(int)rois(roi,<sp/>0,<sp/>p).y;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/>obj<sp/>=<sp/>object(objposy,<sp/>objposx);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/>ew<sp/>=<sp/>complex(exitwave((roi<sp/>*<sp/>rois.shape.x<sp/>+<sp/>p)<sp/>*<sp/>probe.shape.z<sp/>+<sp/>blockIdx.z,<sp/>idy,<sp/>idx));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pacc<sp/>+=<sp/>ew<sp/>*<sp/>obj.conj();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdiv<sp/>+=<sp/>obj.abs2();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>blockIdx.z<sp/>*<sp/>probe.shape.x<sp/>*<sp/>probe.shape.y<sp/>+<sp/>idy<sp/>*<sp/>probe.shape.x<sp/>+<sp/>idx;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bFTNorm)<sp/>pacc<sp/>/=<sp/>(float)(probe.shape.x<sp/>*<sp/>probe.shape.y);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bIsGrad)<sp/>pacc<sp/>-=<sp/>probe[index]<sp/>*<sp/>pdiv;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>probe_acc[index]<sp/>+=<sp/>pacc;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>probe_div[index]<sp/>+=<sp/>pdiv;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>dtype&gt;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ptycho_8cu_1a298859823914cec4625ac4a405426582" kindref="member">ProjectPhiToProbe</ref>(<ref refid="structPOptAlgorithm" kindref="compound">POptAlgorithm</ref>&amp;<sp/>pt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>section,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MImage&lt;dtype&gt;&amp;<sp/>Phi,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bNormalizeFFT,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bIsGradPm)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>blk<sp/>=<sp/>pt.<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref>-&gt;ShapeBlock();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>thr<sp/>=<sp/>pt.<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref>-&gt;ShapeThread();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>0;<sp/>g<sp/>&lt;<sp/>pt.<ref refid="structPOptAlgorithm_1abec0db9e1f00d5267327d02da5161d19" kindref="member">gpus</ref>.size();<sp/>g++)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetDevice(pt.<ref refid="structPOptAlgorithm_1abec0db9e1f00d5267327d02da5161d19" kindref="member">gpus</ref>,<sp/>g);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KProjectPhiToProbe&lt;&lt;&lt;blk,<sp/>thr&gt;&gt;&gt;(pt.<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref>-&gt;arrays[g][0],<sp/>pt.<ref refid="structPOptAlgorithm_1ae4a5ff5d2466dc0a8b59c4d65be2cc6b" kindref="member">probe_acc</ref>-&gt;Ptr(g),<sp/>pt.<ref refid="structPOptAlgorithm_1a110d4fbd5c20c09a2044f8c7f5dd1876" kindref="member">probe_div</ref>-&gt;Ptr(g),</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pt.<ref refid="structPOptAlgorithm_1a506d977d84492238546e64d7b2f38f01" kindref="member">object</ref>-&gt;arrays[g][0],<sp/>Phi.arrays[g][0],<sp/>pt.<ref refid="structPOptAlgorithm_1a96bb15bd81f718c72d585c8ed611eab9" kindref="member">rois</ref>[section]-&gt;arrays[g][0],<sp/>bNormalizeFFT,<sp/>bIsGradPm);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ptycho_8cu_1a56c0632588ec47e287a6398368ceb7fc" kindref="member">ProjectPhiToProbe&lt;complex&gt;</ref>(<ref refid="structPOptAlgorithm" kindref="compound">POptAlgorithm</ref>&amp;<sp/>pt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>section,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cMImage&amp;<sp/>Phi,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bNormalizeFFT,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bIsGradPm);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ptycho_8cu_1a521bcc16a4fddac813e303a422e23cd7" kindref="member">ProjectPhiToProbe&lt;complex16&gt;</ref>(<ref refid="structPOptAlgorithm" kindref="compound">POptAlgorithm</ref>&amp;<sp/>pt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>section,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hcMImage&amp;<sp/>Phi,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bNormalizeFFT,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bIsGradPm);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ptycho_8cu_1a7901e14f413d2c19f8add5823d90d855" kindref="member">EnablePeerToPeer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>gpus);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ptycho_8cu_1a6355ae1c07dad5b070db411cd9f9dbd6" kindref="member">DisablePeerToPeer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>gpus);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ptycho_8cu_1ab258760e7cc02ace89258a7460e9e0d8" kindref="member">k_project_reciprocal_space</ref>(GArray&lt;complex&gt;<sp/>exitwave,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GArray&lt;float&gt;<sp/>difpads,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>rfactors,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>upsample,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nummodes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GArray&lt;float&gt;<sp/>_sigmask,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>geometricsteps,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bIsGrad,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>background,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>bkgaccum)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__shared__<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sh_rfactor[64];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(threadIdx.x<sp/>&lt;<sp/>64)<sp/>sh_rfactor[threadIdx.x]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__syncthreads();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>threadIdx.x<sp/>+<sp/>blockIdx.x<sp/>*<sp/>blockDim.x;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idy<sp/>=<sp/>blockIdx.y;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idz<sp/>=<sp/>blockIdx.z;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;=<sp/>difpads.shape.x)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bApplyBkg<sp/>=<sp/>(background<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>&amp;<sp/>(bkgaccum<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>difpad<sp/>=<sp/>difpads(idz,<sp/>idy,<sp/>idx);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sqrt_difpad<sp/>=<sp/>sqrtf(difpad);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>exit_wave_factor<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>exit_wave_addend<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(difpad<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>wabs2<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>nummodes;<sp/>m++)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>0;<sp/>f<sp/>&lt;<sp/>geometricsteps;<sp/>f++)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>0;<sp/>v<sp/>&lt;<sp/>upsample;<sp/>v++)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>0;<sp/>u<sp/>&lt;<sp/>upsample;<sp/>u++)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wabs2<sp/>+=<sp/>exitwave(geometricsteps<sp/>*<sp/>idz<sp/>*<sp/>nummodes<sp/>+<sp/>nummodes<sp/>*<sp/>f<sp/>+<sp/>m,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+<sp/>idy<sp/>*<sp/>upsample,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u<sp/>+<sp/>idx<sp/>*<sp/>upsample).abs2();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wabs2<sp/>=<sp/>sqrtf(wabs2<sp/>/<sp/>geometricsteps)<sp/>/<sp/>upsample;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>hexptaulambda2<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bApplyBkg)<sp/>wabs2<sp/>+=<sp/><ref refid="ptycho_8hpp_1a21d9c6942860f777da21bac01cb5cd1c" kindref="member">sq</ref>(background[idy<sp/>*<sp/>difpads.shape.x<sp/>+<sp/>idx]);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomicAdd(sh_rfactor<sp/>+<sp/>threadIdx.x<sp/>%<sp/>64,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ptycho_8hpp_1a21d9c6942860f777da21bac01cb5cd1c" kindref="member">sq</ref>(_sigmask(idy,<sp/>idx))<sp/>*<sp/><ref refid="ptycho_8hpp_1a21d9c6942860f777da21bac01cb5cd1c" kindref="member">sq</ref>(sqrt_difpad<sp/>-<sp/>wabs2<sp/>*<sp/>hexptaulambda2));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wabs2<sp/>&gt;<sp/>0.0f)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit_wave_factor<sp/>=<sp/>(sqrt_difpad<sp/>/<sp/>wabs2<sp/>-<sp/>1)<sp/>*<sp/>_sigmask(idy,<sp/>idx);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bApplyBkg)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomicAdd(bkgaccum<sp/>+<sp/>idy<sp/>*<sp/>difpads.shape.x<sp/>+<sp/>idx,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit_wave_factor<sp/>*<sp/>background[idy<sp/>*<sp/>difpads.shape.x<sp/>+<sp/>idx]);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bIsGrad)<sp/>exit_wave_factor<sp/>+=<sp/>1.0f;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit_wave_addend<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit_wave_addend<sp/>=<sp/>sqrt_difpad;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit_wave_factor<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bIsGrad)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit_wave_factor<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit_wave_addend<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>nummodes;<sp/>m++)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>0;<sp/>f<sp/>&lt;<sp/>geometricsteps;<sp/>f++)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>0;<sp/>v<sp/>&lt;<sp/>upsample;<sp/>v++)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>0;<sp/>u<sp/>&lt;<sp/>upsample;<sp/>u++)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/>ew<sp/>=<sp/>exitwave(geometricsteps<sp/>*<sp/>idz<sp/>*<sp/>nummodes<sp/>+<sp/>nummodes<sp/>*<sp/>f<sp/>+<sp/>m,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+<sp/>idy<sp/>*<sp/>upsample,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u<sp/>+<sp/>idx<sp/>*<sp/>upsample);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ew<sp/>=<sp/>ew<sp/>*<sp/>exit_wave_factor<sp/>+<sp/>exit_wave_addend;<sp/></highlight><highlight class="comment">//possibly<sp/>has<sp/>to<sp/>deal<sp/>with<sp/>nan<sp/>or<sp/>inf?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exitwave(geometricsteps<sp/>*<sp/>idz<sp/>*<sp/>nummodes<sp/>+<sp/>nummodes<sp/>*<sp/>f<sp/>+<sp/>m,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+<sp/>idy<sp/>*<sp/>upsample,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u<sp/>+<sp/>idx<sp/>*<sp/>upsample)<sp/>=<sp/>ew;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__syncthreads();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reduction::KSharedReduce(sh_rfactor,<sp/>64);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(threadIdx.x<sp/>==<sp/>0)<sp/>atomicAdd(rfactors<sp/>+<sp/>blockIdx.y,<sp/>sh_rfactor[0]);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ptycho_8cu_1a5d0e3f4192830fa314a9b15975d8bb2f" kindref="member">IndexRois</ref>(<ref refid="structROI" kindref="compound">ROI</ref>*<sp/>rois,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numrois)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;<sp/>r&lt;numrois;<sp/>r++)<sp/>rois[r].I0<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)r;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ptycho_8cu_1ad878deb8a9ac1ae105af1be65e74e3de" kindref="member">project_reciprocal_space</ref>(<ref refid="structPOptAlgorithm" kindref="compound">POptAlgorithm</ref><sp/>&amp;pt,<sp/>rImage*<sp/>difpad,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bIsGradPm)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>SetDevice(pt.<ref refid="structPOptAlgorithm_1abec0db9e1f00d5267327d02da5161d19" kindref="member">gpus</ref>,<sp/>g);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>complex*<sp/>ewave<sp/>=<sp/>pt.<ref refid="structPOptAlgorithm_1a9ebbe9246bb2540b461b66067396ac0e" kindref="member">exitwave</ref>-&gt;Ptr(g);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upsample<sp/>=<sp/>pt.<ref refid="structPOptAlgorithm_1a9ebbe9246bb2540b461b66067396ac0e" kindref="member">exitwave</ref>-&gt;sizex<sp/>/<sp/>difpad-&gt;sizex;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>pt.<ref refid="structPOptAlgorithm_1ad2cd46aefc388e690475a466352dd00f" kindref="member">propagator</ref>[g]-&gt;<ref refid="classPropagator_1ac8149f9492abab7ae463d1380f8369fe" kindref="member">Propagate</ref>(ewave,<sp/>ewave,<sp/>pt.<ref refid="structPOptAlgorithm_1a9ebbe9246bb2540b461b66067396ac0e" kindref="member">exitwave</ref>-&gt;Shape(),<sp/>1);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>pt.<ref refid="structPOptAlgorithm_1a9ebbe9246bb2540b461b66067396ac0e" kindref="member">exitwave</ref>-&gt;arrays[g]-&gt;FFTShift2();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bApplyBkg<sp/>=<sp/>(pt.<ref refid="structPOptAlgorithm_1a89393de4a5e66a2339b813512828c6a0" kindref="member">background</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>&amp;<sp/>(pt.<ref refid="structPOptAlgorithm_1ad42ddbe8feb45a84c8b9dff9a834019b" kindref="member">bkgaccum</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ptycho_8cu_1ab258760e7cc02ace89258a7460e9e0d8" kindref="member">k_project_reciprocal_space</ref>&lt;&lt;&lt;difpad-&gt;ShapeBlock(),<sp/>difpad-&gt;ShapeThread()&gt;&gt;&gt;(pt.<ref refid="structPOptAlgorithm_1a9ebbe9246bb2540b461b66067396ac0e" kindref="member">exitwave</ref>-&gt;arrays[g][0],<sp/>*difpad,<sp/>pt.<ref refid="structPOptAlgorithm_1a7927b2f881d02a9170c59b1e387050ed" kindref="member">rfactors</ref>-&gt;Ptr(g),<sp/>upsample,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pt.<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref>-&gt;sizez,<sp/>pt.<ref refid="structPOptAlgorithm_1a968ce12fa5071c8ac0480f3a2f30e4d8" kindref="member">sigmask</ref>-&gt;arrays[g][0],<sp/>pt.<ref refid="structPOptAlgorithm_1a2278546d425d8708f7d5282439d541f2" kindref="member">geometricsteps</ref>,<sp/>bIsGradPm,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bApplyBkg<sp/>?<sp/>pt.<ref refid="structPOptAlgorithm_1a89393de4a5e66a2339b813512828c6a0" kindref="member">background</ref>-&gt;arrays[g]-&gt;gpuptr<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bApplyBkg<sp/>?<sp/>pt.<ref refid="structPOptAlgorithm_1ad42ddbe8feb45a84c8b9dff9a834019b" kindref="member">bkgaccum</ref>-&gt;arrays[g]-&gt;gpuptr<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>pt.<ref refid="structPOptAlgorithm_1a9ebbe9246bb2540b461b66067396ac0e" kindref="member">exitwave</ref>-&gt;arrays[g]-&gt;FFTShift2();</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>pt.<ref refid="structPOptAlgorithm_1ad2cd46aefc388e690475a466352dd00f" kindref="member">propagator</ref>[g]-&gt;<ref refid="classPropagator_1ac8149f9492abab7ae463d1380f8369fe" kindref="member">Propagate</ref>(ewave,<sp/>ewave,<sp/>pt.<ref refid="structPOptAlgorithm_1a9ebbe9246bb2540b461b66067396ac0e" kindref="member">exitwave</ref>-&gt;Shape(),<sp/>-1);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ptycho_8cu_1a3760b1da2405731ddcbe4728535475fc" kindref="member">ApplyProbeUpdate</ref>(<ref refid="structPOptAlgorithm" kindref="compound">POptAlgorithm</ref>&amp;<sp/>pt,<sp/>cImage&amp;<sp/>velocity,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stepsize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>momentum,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(momentum<sp/>&lt;<sp/>0<sp/>|<sp/>stepsize<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>SetDevice(pt.<ref refid="structPOptAlgorithm_1abec0db9e1f00d5267327d02da5161d19" kindref="member">gpus</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>pt.<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref>-&gt;WeightedLerpSync(*(pt.<ref refid="structPOptAlgorithm_1ae4a5ff5d2466dc0a8b59c4d65be2cc6b" kindref="member">probe_acc</ref>),<sp/>*(pt.<ref refid="structPOptAlgorithm_1a110d4fbd5c20c09a2044f8c7f5dd1876" kindref="member">probe_div</ref>),<sp/>stepsize,<sp/>momentum,<sp/>velocity,<sp/>epsilon);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pt.<ref refid="structPOptAlgorithm_1a7c1b1cc6f0a305a74b9bba62fc2bdb62" kindref="member">probesupport</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim3<sp/>shape<sp/>=<sp/>dim3(pt.<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref>-&gt;sizex,<sp/>pt.<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref>-&gt;sizey,<sp/>pt.<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref>-&gt;sizez);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex*<sp/>pointer<sp/>=<sp/>pt.<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref>-&gt;arrays[0]-&gt;gpuptr;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetDevice(pt.<ref refid="structPOptAlgorithm_1abec0db9e1f00d5267327d02da5161d19" kindref="member">gpus</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pt.<ref refid="structPOptAlgorithm_1af999996bdd95576dfe05569db6be3b53" kindref="member">probef1</ref><sp/>!=<sp/>0)<sp/>pt.<ref refid="structPOptAlgorithm_1acad5f2c1d1066b5397b71034372a9421" kindref="member">probepropagator</ref>-&gt;<ref refid="classPropagator_1ac8149f9492abab7ae463d1380f8369fe" kindref="member">Propagate</ref>(pointer,<sp/>pointer,<sp/>shape,<sp/>+pt.<ref refid="structPOptAlgorithm_1af999996bdd95576dfe05569db6be3b53" kindref="member">probef1</ref>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pt.<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref>-&gt;arrays[0][0]<sp/>*=<sp/>pt.<ref refid="structPOptAlgorithm_1a7c1b1cc6f0a305a74b9bba62fc2bdb62" kindref="member">probesupport</ref>-&gt;arrays[0][0];</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pt.<ref refid="structPOptAlgorithm_1af999996bdd95576dfe05569db6be3b53" kindref="member">probef1</ref><sp/>!=<sp/>0)<sp/>pt.<ref refid="structPOptAlgorithm_1acad5f2c1d1066b5397b71034372a9421" kindref="member">probepropagator</ref>-&gt;<ref refid="classPropagator_1ac8149f9492abab7ae463d1380f8369fe" kindref="member">Propagate</ref>(pointer,<sp/>pointer,<sp/>shape,<sp/>-pt.<ref refid="structPOptAlgorithm_1af999996bdd95576dfe05569db6be3b53" kindref="member">probef1</ref>);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pt.<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref>-&gt;BroadcastSync();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ptycho_8cu_1a5b112da7aae5c2cf748894fffcca3056" kindref="member">DestroyPOptAlgorithm</ref>(<ref refid="structPOptAlgorithm" kindref="compound">POptAlgorithm</ref>*&amp;<sp/>ptycho_ref)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structPOptAlgorithm" kindref="compound">POptAlgorithm</ref>&amp;<sp/>ptycho<sp/>=<sp/>*ptycho_ref;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Dealloc<sp/>POpt.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptycho.<ref refid="structPOptAlgorithm_1ade9e24797a0b051d27502f3148230018" kindref="member">object_div</ref>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptycho.<ref refid="structPOptAlgorithm_1ade9e24797a0b051d27502f3148230018" kindref="member">object_div</ref>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>ptycho.<ref refid="structPOptAlgorithm_1ade9e24797a0b051d27502f3148230018" kindref="member">object_div</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptycho.<ref refid="structPOptAlgorithm_1a4d304204018e1fe000740b0468d74566" kindref="member">object_acc</ref>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptycho.<ref refid="structPOptAlgorithm_1a4d304204018e1fe000740b0468d74566" kindref="member">object_acc</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>ptycho.<ref refid="structPOptAlgorithm_1a4d304204018e1fe000740b0468d74566" kindref="member">object_acc</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptycho.<ref refid="structPOptAlgorithm_1a110d4fbd5c20c09a2044f8c7f5dd1876" kindref="member">probe_div</ref>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptycho.<ref refid="structPOptAlgorithm_1a110d4fbd5c20c09a2044f8c7f5dd1876" kindref="member">probe_div</ref>;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>ptycho.<ref refid="structPOptAlgorithm_1a110d4fbd5c20c09a2044f8c7f5dd1876" kindref="member">probe_div</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptycho.<ref refid="structPOptAlgorithm_1ae4a5ff5d2466dc0a8b59c4d65be2cc6b" kindref="member">probe_acc</ref>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptycho.<ref refid="structPOptAlgorithm_1ae4a5ff5d2466dc0a8b59c4d65be2cc6b" kindref="member">probe_acc</ref>;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>ptycho.<ref refid="structPOptAlgorithm_1ae4a5ff5d2466dc0a8b59c4d65be2cc6b" kindref="member">probe_acc</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>SetDevice(ptycho.<ref refid="structPOptAlgorithm_1abec0db9e1f00d5267327d02da5161d19" kindref="member">gpus</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptycho.<ref refid="structPOptAlgorithm_1a89393de4a5e66a2339b813512828c6a0" kindref="member">background</ref><sp/>&amp;&amp;<sp/>ptycho.<ref refid="structPOptAlgorithm_1a0768eceb552480788fa78044e3cd401c" kindref="member">cpubackground</ref>)<sp/>ptycho.<ref refid="structPOptAlgorithm_1a89393de4a5e66a2339b813512828c6a0" kindref="member">background</ref>-&gt;arrays[0]-&gt;CopyTo(ptycho.<ref refid="structPOptAlgorithm_1a0768eceb552480788fa78044e3cd401c" kindref="member">cpubackground</ref>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaDeviceSynchronize();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptycho.<ref refid="structPOptAlgorithm_1ab543ac443007610201ae30c23e6ad7a5" kindref="member">bkgmomentum</ref>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptycho.<ref refid="structPOptAlgorithm_1ab543ac443007610201ae30c23e6ad7a5" kindref="member">bkgmomentum</ref>;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>ptycho.<ref refid="structPOptAlgorithm_1ab543ac443007610201ae30c23e6ad7a5" kindref="member">bkgmomentum</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptycho.<ref refid="structPOptAlgorithm_1a89393de4a5e66a2339b813512828c6a0" kindref="member">background</ref>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptycho.<ref refid="structPOptAlgorithm_1a89393de4a5e66a2339b813512828c6a0" kindref="member">background</ref>;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>ptycho.<ref refid="structPOptAlgorithm_1a89393de4a5e66a2339b813512828c6a0" kindref="member">background</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptycho.<ref refid="structPOptAlgorithm_1ad42ddbe8feb45a84c8b9dff9a834019b" kindref="member">bkgaccum</ref>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptycho.<ref refid="structPOptAlgorithm_1ad42ddbe8feb45a84c8b9dff9a834019b" kindref="member">bkgaccum</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>ptycho.<ref refid="structPOptAlgorithm_1ad42ddbe8feb45a84c8b9dff9a834019b" kindref="member">bkgaccum</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Deallocating<sp/>base<sp/>algorithm.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>0;<sp/>g<sp/>&lt;<sp/>ptycho.<ref refid="structPOptAlgorithm_1abec0db9e1f00d5267327d02da5161d19" kindref="member">gpus</ref>.size();<sp/>g++)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_debug(format(</highlight><highlight class="stringliteral">&quot;Dealloc<sp/>propagator:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>g));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetDevice(ptycho.<ref refid="structPOptAlgorithm_1abec0db9e1f00d5267327d02da5161d19" kindref="member">gpus</ref>,<sp/>g);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptycho.<ref refid="structPOptAlgorithm_1ad2cd46aefc388e690475a466352dd00f" kindref="member">propagator</ref>[g];</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho.<ref refid="structPOptAlgorithm_1ad2cd46aefc388e690475a466352dd00f" kindref="member">propagator</ref>[g]<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Probe<sp/>D2H&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>ptycho.<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref>-&gt;CopyTo(ptycho.<ref refid="structPOptAlgorithm_1ad14397ce6f4c85f02a060a4ddd1d5992" kindref="member">cpuprobe</ref>);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Object<sp/>D2H&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>ptycho.<ref refid="structPOptAlgorithm_1a506d977d84492238546e64d7b2f38f01" kindref="member">object</ref>-&gt;CopyTo(ptycho.<ref refid="structPOptAlgorithm_1a6e67c74cbab8c6ab4ff705aadb4f745d" kindref="member">cpuobject</ref>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Dealloc<sp/>probe.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptycho.<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Dealloc<sp/>object.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptycho.<ref refid="structPOptAlgorithm_1a506d977d84492238546e64d7b2f38f01" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Dealloc<sp/>exitwave.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptycho.<ref refid="structPOptAlgorithm_1a9ebbe9246bb2540b461b66067396ac0e" kindref="member">exitwave</ref>;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Dealloc<sp/>supports.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptycho.<ref refid="structPOptAlgorithm_1aab95c3d5ca720cbb59c2a9dbfa508013" kindref="member">objectsupport</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptycho.<ref refid="structPOptAlgorithm_1aab95c3d5ca720cbb59c2a9dbfa508013" kindref="member">objectsupport</ref>;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptycho.<ref refid="structPOptAlgorithm_1a7c1b1cc6f0a305a74b9bba62fc2bdb62" kindref="member">probesupport</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptycho.<ref refid="structPOptAlgorithm_1a7c1b1cc6f0a305a74b9bba62fc2bdb62" kindref="member">probesupport</ref>;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Dealloc<sp/>rfactors.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptycho.<ref refid="structPOptAlgorithm_1a7927b2f881d02a9170c59b1e387050ed" kindref="member">rfactors</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptycho.<ref refid="structPOptAlgorithm_1a968ce12fa5071c8ac0480f3a2f30e4d8" kindref="member">sigmask</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Dealloc<sp/>rois.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>roi<sp/>:<sp/>ptycho.<ref refid="structPOptAlgorithm_1a96bb15bd81f718c72d585c8ed611eab9" kindref="member">rois</ref>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>roi;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Done.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>SetDevice(ptycho.<ref refid="structPOptAlgorithm_1abec0db9e1f00d5267327d02da5161d19" kindref="member">gpus</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptycho.<ref refid="structPOptAlgorithm_1acad5f2c1d1066b5397b71034372a9421" kindref="member">probepropagator</ref>;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>ptycho_ref<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><ref refid="structPOptAlgorithm" kindref="compound">POptAlgorithm</ref>*<sp/><ref refid="ptycho_8cu_1ac6d77be77215d1df299307ef6a2175dc" kindref="member">CreatePOptAlgorithm</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>_difpads,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dim3&amp;<sp/>difshape,<sp/>complex*<sp/>_probe,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dim3&amp;<sp/>probeshape,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex*<sp/>_object,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dim3&amp;<sp/>objshape,<sp/><ref refid="structROI" kindref="compound">ROI</ref>*<sp/>_rois,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numrois,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batchsize,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>_rfact,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>gpus,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>_objectsupport,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>_probesupport,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numobjsupp,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>_sigmask,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>geometricsteps,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>background,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>probef1,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>step_obj,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>step_probe,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>reg_obj,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>reg_probe)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structPOptAlgorithm" kindref="compound">POptAlgorithm</ref>*<sp/>ptycho<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structPOptAlgorithm" kindref="compound">POptAlgorithm</ref>;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1abec0db9e1f00d5267327d02da5161d19" kindref="member">gpus</ref><sp/>=<sp/>gpus;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Initializing<sp/>algorithm.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Enabling<sp/>P2P&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1af999996bdd95576dfe05569db6be3b53" kindref="member">probef1</ref><sp/>=<sp/>probef1;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ptycho_8cu_1a7901e14f413d2c19f8add5823d90d855" kindref="member">EnablePeerToPeer</ref>(ptycho-&gt;<ref refid="structPOptAlgorithm_1abec0db9e1f00d5267327d02da5161d19" kindref="member">gpus</ref>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a0432e54095f9ef861d69ef7db2020bcc" kindref="member">objreg</ref><sp/>=<sp/>reg_obj;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a84777c02e5be6e5a84906bf7ba0da62a" kindref="member">probereg</ref><sp/>=<sp/>reg_probe;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a28af23f00cd500b58e7145aeb57a16e2" kindref="member">objstep</ref><sp/>=<sp/>step_obj;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1ab26d95672cf1bdb420e2edb86df59565" kindref="member">probestep</ref><sp/>=<sp/>step_probe;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a92c4b4ea6b38caeb8e254aa30d48317b" kindref="member">difpadshape</ref>.x<sp/>=<sp/>difshape.x;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a92c4b4ea6b38caeb8e254aa30d48317b" kindref="member">difpadshape</ref>.y<sp/>=<sp/>difshape.y;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a92c4b4ea6b38caeb8e254aa30d48317b" kindref="member">difpadshape</ref>.z<sp/>=<sp/>difshape.z;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ngpus<sp/>=<sp/>gpus.size();</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a2278546d425d8708f7d5282439d541f2" kindref="member">geometricsteps</ref><sp/>=<sp/>geometricsteps;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(batchsize<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a536fe6af4356d89078241dbf8dbb6b64" kindref="member">singlebatchsize</ref><sp/>=<sp/>batchsize;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a3b7ba09622974d03379e1028946e6111" kindref="member">multibatchsize</ref><sp/>=<sp/>batchsize<sp/>*<sp/>ngpus;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batchsize<sp/>*=<sp/>ngpus;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a536fe6af4356d89078241dbf8dbb6b64" kindref="member">singlebatchsize</ref><sp/>=<sp/>(numrois<sp/>+<sp/>ngpus<sp/>-<sp/>1)<sp/>/<sp/>ngpus;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batchsize<sp/>=<sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a3b7ba09622974d03379e1028946e6111" kindref="member">multibatchsize</ref><sp/>=<sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a536fe6af4356d89078241dbf8dbb6b64" kindref="member">singlebatchsize</ref><sp/>*<sp/>ngpus;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_debug(format(</highlight><highlight class="stringliteral">&quot;Batches:<sp/>{}<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a536fe6af4356d89078241dbf8dbb6b64" kindref="member">singlebatchsize</ref>,<sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a3b7ba09622974d03379e1028946e6111" kindref="member">multibatchsize</ref>));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1ac24fac966485161d3bef7599ee42d679" kindref="member">total_num_rois</ref><sp/>=<sp/>numrois;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a8ec4655eee89ffd8bf45f8779d6ba098" kindref="member">cpudifpads</ref><sp/>=<sp/>_difpads;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1ad14397ce6f4c85f02a060a4ddd1d5992" kindref="member">cpuprobe</ref><sp/>=<sp/>_probe;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a6e67c74cbab8c6ab4ff705aadb4f745d" kindref="member">cpuobject</ref><sp/>=<sp/>_object;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a756b6b85c939871d321128435a279dfb" kindref="member">cpurois</ref><sp/>=<sp/>_rois;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1abfd36af46d12deaded7d6ebb8e122242" kindref="member">cpurfact</ref><sp/>=<sp/>_rfact;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Alloc<sp/>probe.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>cMImage(_probe,<sp/>probeshape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>gpus);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Alloc<sp/>obj&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a506d977d84492238546e64d7b2f38f01" kindref="member">object</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>cMImage(_object,<sp/>objshape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>gpus);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Alloc<sp/>EW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a9ebbe9246bb2540b461b66067396ac0e" kindref="member">exitwave</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>cMImage(probeshape.x,<sp/>probeshape.y,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a536fe6af4356d89078241dbf8dbb6b64" kindref="member">singlebatchsize</ref><sp/>*<sp/>probeshape.z<sp/>*<sp/>geometricsteps,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>gpus);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Alloc<sp/>Supports&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numobjsupp<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>_objectsupport<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1aab95c3d5ca720cbb59c2a9dbfa508013" kindref="member">objectsupport</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>rMImage(_objectsupport,<sp/>dim3(objshape.x,<sp/>objshape.y,<sp/>numobjsupp),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1abec0db9e1f00d5267327d02da5161d19" kindref="member">gpus</ref>);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1aacca83621286aadbdc45a53527862069" kindref="member">SupportSizes</ref><sp/>=<sp/>std::vector&lt;float&gt;();</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numobjsupp;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>objshape.x<sp/>*<sp/>objshape.y;<sp/>j++)<sp/>s<sp/>+=<sp/>_objectsupport[j<sp/>+<sp/>i<sp/>*<sp/>objshape.x<sp/>*<sp/>objshape.y];</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1aacca83621286aadbdc45a53527862069" kindref="member">SupportSizes</ref>.push_back(s);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1aab95c3d5ca720cbb59c2a9dbfa508013" kindref="member">objectsupport</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_probesupport<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a7c1b1cc6f0a305a74b9bba62fc2bdb62" kindref="member">probesupport</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>rMImage(_probesupport,<sp/>dim3(probeshape.x,<sp/>probeshape.y,<sp/>probeshape.z),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1abec0db9e1f00d5267327d02da5161d19" kindref="member">gpus</ref>);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a7c1b1cc6f0a305a74b9bba62fc2bdb62" kindref="member">probesupport</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Alloc<sp/>RF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a7927b2f881d02a9170c59b1e387050ed" kindref="member">rfactors</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>rMImage(difshape.y,<sp/>1,<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1abec0db9e1f00d5267327d02da5161d19" kindref="member">gpus</ref>);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a7927b2f881d02a9170c59b1e387050ed" kindref="member">rfactors</ref>-&gt;SetGPUToZero();</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetDevice(ptycho-&gt;<ref refid="structPOptAlgorithm_1abec0db9e1f00d5267327d02da5161d19" kindref="member">gpus</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1aaba1f69047dd13bbbca184679c973c1d" kindref="member">roibatch_offset</ref><sp/>=<sp/>std::vector&lt;int&gt;();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>numrois;<sp/>n<sp/>+=<sp/>batchsize)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_debug(format(</highlight><highlight class="stringliteral">&quot;Creating<sp/>DPGroup<sp/>at:<sp/>{}<sp/>of<sp/>{}<sp/>at<sp/>step<sp/>{}&quot;</highlight><highlight class="normal"><sp/>,<sp/>n,<sp/>numrois,<sp/>batchsize));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numrois<sp/>-<sp/>n<sp/>&lt;<sp/>batchsize)<sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>batch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a96bb15bd81f718c72d585c8ed611eab9" kindref="member">rois</ref>.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="ptycho_8hpp_1a2441dd3c983498585f5d3713eb2bdec7" kindref="member">RoiArray</ref>(_rois<sp/>+<sp/>n<sp/>*<sp/>geometricsteps,<sp/>geometricsteps,<sp/>1,<sp/>numrois<sp/>-<sp/>n,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>gpus));</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a96bb15bd81f718c72d585c8ed611eab9" kindref="member">rois</ref>.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="ptycho_8hpp_1a2441dd3c983498585f5d3713eb2bdec7" kindref="member">RoiArray</ref>(_rois<sp/>+<sp/>n<sp/>*<sp/>geometricsteps,<sp/>geometricsteps,<sp/>1,<sp/>batchsize,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>gpus));</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1aaba1f69047dd13bbbca184679c973c1d" kindref="member">roibatch_offset</ref>.push_back(n<sp/>/<sp/>ngpus);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_sigmask)<sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a968ce12fa5071c8ac0480f3a2f30e4d8" kindref="member">sigmask</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>rMImage(_sigmask,<sp/>dim3(difshape.x,<sp/>difshape.y,<sp/>1),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>gpus);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>0;<sp/>g<sp/>&lt;<sp/>gpus.size();<sp/>g++)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetDevice(gpus,<sp/>g);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_debug(format(</highlight><highlight class="stringliteral">&quot;Creating<sp/>propagator:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>g));</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1ad2cd46aefc388e690475a466352dd00f" kindref="member">propagator</ref>[g]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classFraunhoffer" kindref="compound">Fraunhoffer</ref>();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Computing<sp/>I0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetDevice(gpus,<sp/>0);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1af5208a1e588a5db1bfd7866b49c29189" kindref="member">I0</ref><sp/>=<sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref>-&gt;arrays[0]-&gt;Norm2();</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1acad5f2c1d1066b5397b71034372a9421" kindref="member">probepropagator</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classASM" kindref="compound">ASM</ref>();</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1ade9e24797a0b051d27502f3148230018" kindref="member">object_div</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>rMImage(ptycho-&gt;<ref refid="structPOptAlgorithm_1a506d977d84492238546e64d7b2f38f01" kindref="member">object</ref>-&gt;Shape(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>gpus);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a4d304204018e1fe000740b0468d74566" kindref="member">object_acc</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>cMImage(ptycho-&gt;<ref refid="structPOptAlgorithm_1a506d977d84492238546e64d7b2f38f01" kindref="member">object</ref>-&gt;Shape(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>gpus);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a110d4fbd5c20c09a2044f8c7f5dd1876" kindref="member">probe_div</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>rMImage(ptycho-&gt;<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref>-&gt;Shape(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>gpus);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1ae4a5ff5d2466dc0a8b59c4d65be2cc6b" kindref="member">probe_acc</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>cMImage(ptycho-&gt;<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref>-&gt;Shape(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>gpus);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(background)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a0768eceb552480788fa78044e3cd401c" kindref="member">cpubackground</ref><sp/>=<sp/>background;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1a89393de4a5e66a2339b813512828c6a0" kindref="member">background</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>rMImage(background,<sp/>difshape.x,<sp/>difshape.y,<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>gpus);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1ad42ddbe8feb45a84c8b9dff9a834019b" kindref="member">bkgaccum</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>rMImage(difshape.x,<sp/>difshape.y,<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>gpus);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1ad42ddbe8feb45a84c8b9dff9a834019b" kindref="member">bkgaccum</ref>-&gt;SetGPUToZero();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetDevice(ptycho-&gt;<ref refid="structPOptAlgorithm_1abec0db9e1f00d5267327d02da5161d19" kindref="member">gpus</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptycho-&gt;<ref refid="structPOptAlgorithm_1ab543ac443007610201ae30c23e6ad7a5" kindref="member">bkgmomentum</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>rImage(difshape.x,<sp/>difshape.y,<sp/>1);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptycho;</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/ptycho.cu"/>
  </compounddef>
</doxygen>
