<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="pie_8cu" kind="file" language="C++">
    <compoundname>pie.cu</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">random</includes>
    <includes local="yes">complex.hpp</includes>
    <includes local="yes">logger.hpp</includes>
    <includes refid="ptycho_8hpp" local="yes">ptycho.hpp</includes>
    <includes local="yes">types.hpp</includes>
    <includes local="yes">utils.hpp</includes>
    <incdepgraph>
      <node id="10">
        <label>common/complex.hpp</label>
      </node>
      <node id="13">
        <label>cufft.h</label>
      </node>
      <node id="1">
        <label>/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/pie.cu</label>
        <link refid="pie_8cu"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>complex.hpp</label>
      </node>
      <node id="3">
        <label>cmath</label>
      </node>
      <node id="12">
        <label>propagator.hpp</label>
        <link refid="propagator_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>random</label>
      </node>
      <node id="15">
        <label>utils.hpp</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="8">
        <label>ptycho.hpp</label>
        <link refid="ptycho_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cstddef</label>
      </node>
      <node id="14">
        <label>types.hpp</label>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="7">
        <label>logger.hpp</label>
      </node>
      <node id="11">
        <label>common/types.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="pie_8cu_1ad3eaf7b0e0d7a760572bb4a385d128d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structPie" kindref="compound">Pie</ref> *</type>
        <definition>Pie* CreatePie</definition>
        <argsstring>(float *difpads, const dim3 &amp;difshape, complex *probe, const dim3 &amp;probeshape, complex *object, const dim3 &amp;objshape, ROI *rois, int numrois, int batchsize, float *rfact, const std::vector&lt; int &gt; &amp;gpus, float *objsupp, float *probesupp, int numobjsupp, float *sigmask, int geometricsteps, float *background, float probef1, float step_object, float step_probe, float reg_obj, float reg_probe)</argsstring>
        <name>CreatePie</name>
        <param>
          <type>float *</type>
          <declname>difpads</declname>
        </param>
        <param>
          <type>const dim3 &amp;</type>
          <declname>difshape</declname>
        </param>
        <param>
          <type>complex *</type>
          <declname>probe</declname>
        </param>
        <param>
          <type>const dim3 &amp;</type>
          <declname>probeshape</declname>
        </param>
        <param>
          <type>complex *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const dim3 &amp;</type>
          <declname>objshape</declname>
        </param>
        <param>
          <type><ref refid="structROI" kindref="compound">ROI</ref> *</type>
          <declname>rois</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numrois</declname>
        </param>
        <param>
          <type>int</type>
          <declname>batchsize</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>rfact</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>gpus</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>objsupp</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>probesupp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numobjsupp</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sigmask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>geometricsteps</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>background</declname>
        </param>
        <param>
          <type>float</type>
          <declname>probef1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>step_object</declname>
        </param>
        <param>
          <type>float</type>
          <declname>step_probe</declname>
        </param>
        <param>
          <type>float</type>
          <declname>reg_obj</declname>
        </param>
        <param>
          <type>float</type>
          <declname>reg_probe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/pie.cu" line="12" column="5" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/pie.cu" bodystart="12" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="pie_8cu_1a0c41d92a50ebf6984862d474545e5a34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DestroyPie</definition>
        <argsstring>(Pie *&amp;pie)</argsstring>
        <name>DestroyPie</name>
        <param>
          <type><ref refid="structPie" kindref="compound">Pie</ref> *&amp;</type>
          <declname>pie</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/pie.cu" line="39" column="6" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/pie.cu" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="pie_8cu_1aa4e6fc08a00ec96c3cd8bd0ea1d65663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__global__ void</type>
        <definition>__global__ void k_pie_wavefront_calc</definition>
        <argsstring>(GArray&lt; complex &gt; wavefront, const GArray&lt; complex &gt; probe, const GArray&lt; complex &gt; object, const ROI *rois)</argsstring>
        <name>k_pie_wavefront_calc</name>
        <param>
          <type>GArray&lt; complex &gt;</type>
          <declname>wavefront</declname>
        </param>
        <param>
          <type>const GArray&lt; complex &gt;</type>
          <declname>probe</declname>
        </param>
        <param>
          <type>const GArray&lt; complex &gt;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const <ref refid="structROI" kindref="compound">ROI</ref> *</type>
          <declname>rois</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/pie.cu" line="44" column="17" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/pie.cu" bodystart="44" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="pie_8cu_1a72ae3bdb83d34f52d79bf09a6b5c0b2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__global__ void</type>
        <definition>__global__ void k_pie_update_probe</definition>
        <argsstring>(GArray&lt; complex &gt; object_box, GArray&lt; complex &gt; object, GArray&lt; complex &gt; probe, GArray&lt; complex &gt; wavefront, GArray&lt; complex &gt; wavefront_prev, float reg_probe, float step_probe, float obj_abs2_max, const ROI *rois)</argsstring>
        <name>k_pie_update_probe</name>
        <param>
          <type>GArray&lt; complex &gt;</type>
          <declname>object_box</declname>
        </param>
        <param>
          <type>GArray&lt; complex &gt;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>GArray&lt; complex &gt;</type>
          <declname>probe</declname>
        </param>
        <param>
          <type>GArray&lt; complex &gt;</type>
          <declname>wavefront</declname>
        </param>
        <param>
          <type>GArray&lt; complex &gt;</type>
          <declname>wavefront_prev</declname>
        </param>
        <param>
          <type>float</type>
          <declname>reg_probe</declname>
        </param>
        <param>
          <type>float</type>
          <declname>step_probe</declname>
        </param>
        <param>
          <type>float</type>
          <declname>obj_abs2_max</declname>
        </param>
        <param>
          <type>const <ref refid="structROI" kindref="compound">ROI</ref> *</type>
          <declname>rois</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/pie.cu" line="64" column="17" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/pie.cu" bodystart="64" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="pie_8cu_1a63785598fc08ddacd58802a0d2ff5ab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__global__ void</type>
        <definition>__global__ void k_pie_update_object</definition>
        <argsstring>(GArray&lt; complex &gt; object, GArray&lt; complex &gt; probe, GArray&lt; complex &gt; wavefront, GArray&lt; complex &gt; wavefront_prev, float reg_obj, float step_obj, float probe_abs2_max, const ROI *rois)</argsstring>
        <name>k_pie_update_object</name>
        <param>
          <type>GArray&lt; complex &gt;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>GArray&lt; complex &gt;</type>
          <declname>probe</declname>
        </param>
        <param>
          <type>GArray&lt; complex &gt;</type>
          <declname>wavefront</declname>
        </param>
        <param>
          <type>GArray&lt; complex &gt;</type>
          <declname>wavefront_prev</declname>
        </param>
        <param>
          <type>float</type>
          <declname>reg_obj</declname>
        </param>
        <param>
          <type>float</type>
          <declname>step_obj</declname>
        </param>
        <param>
          <type>float</type>
          <declname>probe_abs2_max</declname>
        </param>
        <param>
          <type>const <ref refid="structROI" kindref="compound">ROI</ref> *</type>
          <declname>rois</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/pie.cu" line="97" column="17" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/pie.cu" bodystart="97" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="pie_8cu_1a6a7f0eae60d63ab225a52baa5f554254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_array</definition>
        <argsstring>(int *data, size_t n)</argsstring>
        <name>range_array</name>
        <param>
          <type>int *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/pie.cu" line="128" column="6" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/pie.cu" bodystart="128" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="pie_8cu_1a53e99669c1d68c75f1a3b65a305b00d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shuffle_array</definition>
        <argsstring>(int *data, size_t n)</argsstring>
        <name>shuffle_array</name>
        <param>
          <type>int *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/pie.cu" line="134" column="6" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/pie.cu" bodystart="134" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="pie_8cu_1ad47895342ed5f0c3d83376afa2e576ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PieRun</definition>
        <argsstring>(Pie &amp;pie, int iterations)</argsstring>
        <name>PieRun</name>
        <param>
          <type><ref refid="structPie" kindref="compound">Pie</ref> &amp;</type>
          <declname>pie</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/pie.cu" line="138" column="6" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/pie.cu" bodystart="138" bodyend="239"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;complex.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;logger.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ptycho_8hpp" kindref="compound">ptycho.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;types.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><ref refid="structPie" kindref="compound">Pie</ref>*<sp/><ref refid="pie_8cu_1ad3eaf7b0e0d7a760572bb4a385d128d8" kindref="member">CreatePie</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>difpads,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dim3&amp;<sp/>difshape,</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex*<sp/>probe,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dim3&amp;<sp/>probeshape,</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dim3&amp;<sp/>objshape,</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structROI" kindref="compound">ROI</ref>*<sp/>rois,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numrois,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batchsize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>rfact,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>gpus,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>objsupp,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>probesupp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numobjsupp,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>sigmask,<sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>can<sp/>we<sp/>remove<sp/>sigmask,<sp/>geometricsteps,<sp/>background<sp/>and<sp/>probef1?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>geometricsteps,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>background,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>probef1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>step_object,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>step_probe,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>reg_obj,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>reg_probe)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structPie" kindref="compound">Pie</ref>*<sp/>pie<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structPie" kindref="compound">Pie</ref>();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>pie-&gt;<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref><sp/>=<sp/><ref refid="ptycho_8cu_1ac6d77be77215d1df299307ef6a2175dc" kindref="member">CreatePOptAlgorithm</ref>(difpads,<sp/>difshape,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probe,<sp/>probeshape,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>objshape,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rois,<sp/>numrois,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batchsize,<sp/>rfact,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpus,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objsupp,<sp/>probesupp,<sp/>numobjsupp,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigmask,<sp/>geometricsteps,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>background,<sp/>probef1,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step_object,<sp/>step_probe,<sp/>reg_obj,<sp/>reg_probe);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pie;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pie_8cu_1a0c41d92a50ebf6984862d474545e5a34" kindref="member">DestroyPie</ref>(<ref refid="structPie" kindref="compound">Pie</ref>*&amp;<sp/>pie)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ptycho_8cu_1a5b112da7aae5c2cf748894fffcca3056" kindref="member">DestroyPOptAlgorithm</ref>(pie-&gt;<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>pie<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pie_8cu_1aa4e6fc08a00ec96c3cd8bd0ea1d65663" kindref="member">k_pie_wavefront_calc</ref>(GArray&lt;complex&gt;<sp/>wavefront,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GArray&lt;complex&gt;<sp/>probe,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GArray&lt;complex&gt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structROI" kindref="compound">ROI</ref>*<sp/>rois)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>blockIdx.x<sp/>*<sp/>blockDim.x<sp/>+<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idy<sp/>=<sp/>blockIdx.y<sp/>*<sp/>blockDim.y<sp/>+<sp/>threadIdx.y;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>blockIdx.z<sp/>*<sp/>blockDim.z<sp/>+<sp/>threadIdx.z;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;=<sp/>probe.shape.x<sp/>||<sp/>idy<sp/>&gt;=<sp/>probe.shape.y)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>objposx<sp/>=<sp/>(int)<sp/>rois[0].x<sp/>+<sp/>idx;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>objposy<sp/>=<sp/>(int)<sp/>rois[0].y<sp/>+<sp/>idy;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>complex<sp/>obj<sp/>=<sp/>object(objposy,<sp/>objposx);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_modes<sp/>=<sp/>probe.shape.z;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>num_modes;<sp/>++m)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wavefront(m,<sp/>idy,<sp/>idx)<sp/>=<sp/>obj<sp/>*<sp/>probe(m,<sp/>idy,<sp/>idx);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pie_8cu_1a72ae3bdb83d34f52d79bf09a6b5c0b2b" kindref="member">k_pie_update_probe</ref>(GArray&lt;complex&gt;<sp/>object_box,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GArray&lt;complex&gt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>GArray&lt;complex&gt;<sp/>probe,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GArray&lt;complex&gt;<sp/>wavefront,<sp/>GArray&lt;complex&gt;<sp/>wavefront_prev,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>reg_probe,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>step_probe,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>obj_abs2_max,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structROI" kindref="compound">ROI</ref>*<sp/>rois)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>blockIdx.x<sp/>*<sp/>blockDim.x<sp/>+<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idy<sp/>=<sp/>blockIdx.y<sp/>*<sp/>blockDim.y<sp/>+<sp/>threadIdx.y;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;=<sp/>probe.shape.x<sp/>||<sp/>idy<sp/>&gt;=<sp/>probe.shape.y)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_modes<sp/>=<sp/>probe.shape.z;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>objposx<sp/>=<sp/>(int)<sp/>rois[0].x<sp/>+<sp/>idx;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>objposy<sp/>=<sp/>(int)<sp/>rois[0].y<sp/>+<sp/>idy;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>complex<sp/>obj<sp/>=<sp/>object(objposy,<sp/>objposx);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>complex<sp/>obj_conj<sp/>=<sp/>obj.conj();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>obj_abs2_sum<sp/>=<sp/>obj.abs2()<sp/>*<sp/>num_modes;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>denominator_p<sp/>=<sp/>(1.0<sp/>-<sp/>reg_probe)<sp/>*<sp/>obj_abs2_sum<sp/>+<sp/>reg_probe<sp/>*<sp/>obj_abs2_max;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>probe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>num_modes;<sp/>++m)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>complex<sp/>delta_wavefront<sp/>=<sp/>wavefront(m,<sp/>idy,<sp/>idx)<sp/>-<sp/>wavefront_prev(m,<sp/>idy,<sp/>idx);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>complex<sp/>probe_delta<sp/>=<sp/>obj_conj<sp/>*<sp/>delta_wavefront;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probe(m,<sp/>idy,<sp/>idx)<sp/>+=<sp/>(step_probe<sp/>*<sp/>probe_delta)<sp/>/<sp/>denominator_p;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pie_8cu_1a63785598fc08ddacd58802a0d2ff5ab5" kindref="member">k_pie_update_object</ref>(GArray&lt;complex&gt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>GArray&lt;complex&gt;<sp/>probe,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GArray&lt;complex&gt;<sp/>wavefront,<sp/>GArray&lt;complex&gt;<sp/>wavefront_prev,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>reg_obj,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>step_obj,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>probe_abs2_max,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structROI" kindref="compound">ROI</ref>*<sp/>rois)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>blockIdx.x<sp/>*<sp/>blockDim.x<sp/>+<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idy<sp/>=<sp/>blockIdx.y<sp/>*<sp/>blockDim.y<sp/>+<sp/>threadIdx.y;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;=<sp/>probe.shape.x<sp/>||<sp/>idy<sp/>&gt;=<sp/>probe.shape.y)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_modes<sp/>=<sp/>probe.shape.z;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>objposx<sp/>=<sp/>(int)<sp/>rois[0].x<sp/>+<sp/>idx;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>objposy<sp/>=<sp/>(int)<sp/>rois[0].y<sp/>+<sp/>idy;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>probe_abs2_sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>num_modes;<sp/>++m)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probe_abs2_sum<sp/>+=<sp/>probe(m,<sp/>idy,<sp/>idx).abs2();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/>obj_delta<sp/>=<sp/>complex(0);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>num_modes;<sp/>++m)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>complex<sp/>delta_wavefront<sp/>=<sp/>wavefront(m,<sp/>idy,<sp/>idx)<sp/>-<sp/>wavefront_prev(m,<sp/>idy,<sp/>idx);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj_delta<sp/>+=<sp/>probe(m,<sp/>idy,<sp/>idx).conj()<sp/>*<sp/>delta_wavefront;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>denominator_o<sp/>=<sp/>(1.0<sp/>-<sp/>reg_obj)<sp/>*<sp/>probe_abs2_sum<sp/>+<sp/>reg_obj<sp/>*<sp/>probe_abs2_max;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>object(objposy,<sp/>objposx)<sp/>+=<sp/>(step_obj<sp/>*<sp/>obj_delta)<sp/>/<sp/>denominator_o;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pie_8cu_1a6a7f0eae60d63ab225a52baa5f554254" kindref="member">range_array</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pie_8cu_1a53e99669c1d68c75f1a3b65a305b00d1" kindref="member">shuffle_array</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shuffle(data,<sp/>data<sp/>+<sp/>n,<sp/>std::default_random_engine());</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pie_8cu_1ad47895342ed5f0c3d83376afa2e576ce" kindref="member">PieRun</ref>(<ref refid="structPie" kindref="compound">Pie</ref>&amp;<sp/>pie,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_assert(<ref refid="ptycho_8hpp_1a97ec95d785a25d7a7ad2bac4ed1ff5ba" kindref="member">ptycho_num_batches</ref>(*pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>),<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>algorithm<sp/>does<sp/>not<sp/>support<sp/>MultiGPU.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_assert(<ref refid="ptycho_8hpp_1a29e6ab2719a0f15f98956fbf7e113115" kindref="member">ptycho_batch_size</ref>(*pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>)<sp/>==<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Batch<sp/>&gt;<sp/>1<sp/>is<sp/>not<sp/>supported<sp/>for<sp/>PIE.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_event_start(</highlight><highlight class="stringliteral">&quot;PieRun&quot;</highlight><highlight class="normal">,<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_param_int(</highlight><highlight class="stringliteral">&quot;iter&quot;</highlight><highlight class="normal">,<sp/>iterations),</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_param_int(</highlight><highlight class="stringliteral">&quot;difpadshape.x&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a92c4b4ea6b38caeb8e254aa30d48317b" kindref="member">difpadshape</ref>.x),</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_param_int(</highlight><highlight class="stringliteral">&quot;difpadshape.y&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a92c4b4ea6b38caeb8e254aa30d48317b" kindref="member">difpadshape</ref>.y),</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_param_int(</highlight><highlight class="stringliteral">&quot;difpadshape.z&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a92c4b4ea6b38caeb8e254aa30d48317b" kindref="member">difpadshape</ref>.z)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch_size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>probeshape<sp/>=<sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref>-&gt;Shape();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>objectshape<sp/>=<sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a506d977d84492238546e64d7b2f38f01" kindref="member">object</ref>-&gt;Shape();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>difpadshape<sp/>=<sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a92c4b4ea6b38caeb8e254aa30d48317b" kindref="member">difpadshape</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>SetDevice(pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1abec0db9e1f00d5267327d02da5161d19" kindref="member">gpus</ref>,<sp/>gpu);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>cImage<sp/>obj_box(probeshape);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_modes<sp/>=<sp/><ref refid="ptycho_8hpp_1a84db02ad465b040943703c8bfa2de0ff" kindref="member">ptycho_num_modes</ref>(*pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>cImage<sp/>wavefront_prev(*pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a9ebbe9246bb2540b461b66067396ac0e" kindref="member">exitwave</ref>-&gt;arrays[0]);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>time0<sp/>=<sp/>ssc_time();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>(batchsize<sp/>==<sp/>1)<sp/>=&gt;<sp/>(num_batches<sp/>==<sp/>num_rois)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_rois<sp/>=<sp/><ref refid="ptycho_8hpp_1a97ec95d785a25d7a7ad2bac4ed1ff5ba" kindref="member">ptycho_num_batches</ref>(*pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>random_idx[num_rois];</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pie_8cu_1a6a7f0eae60d63ab225a52baa5f554254" kindref="member">range_array</ref>(random_idx,<sp/>num_rois);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>0;<sp/>iter<sp/>&lt;<sp/>iterations;<sp/>++iter)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_event_start(</highlight><highlight class="stringliteral">&quot;iter&quot;</highlight><highlight class="normal">,<sp/>{<sp/>ssc_param_int(</highlight><highlight class="stringliteral">&quot;iter&quot;</highlight><highlight class="normal">,<sp/>iter)<sp/>});</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a7927b2f881d02a9170c59b1e387050ed" kindref="member">rfactors</ref>-&gt;SetGPUToZero();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pie_8cu_1a53e99669c1d68c75f1a3b65a305b00d1" kindref="member">shuffle_array</ref>(random_idx,<sp/>num_rois);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos_idx<sp/>=<sp/>0;<sp/>pos_idx<sp/>&lt;<sp/>num_rois;<sp/>++pos_idx)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>random_pos_idx<sp/>=<sp/>random_idx[pos_idx];</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>difpad_batch_ptr<sp/>=<sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a8ec4655eee89ffd8bf45f8779d6ba098" kindref="member">cpudifpads</ref><sp/>+</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>random_pos_idx<sp/>*<sp/>difpadshape.x<sp/>*<sp/>difpadshape.y;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>improve<sp/>so<sp/>we<sp/>can<sp/>avoid<sp/>reallocating<sp/>arrays<sp/>every<sp/>iteration,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>need<sp/>a<sp/>speedup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rMImage<sp/>cur_difpad(difpad_batch_ptr,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>difpadshape.x,<sp/>difpadshape.y,<sp/>batch_size,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1abec0db9e1f00d5267327d02da5161d19" kindref="member">gpus</ref>,<sp/>MemoryType::EAllocCPUGPU);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim3<sp/>blk<sp/>=<sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a9ebbe9246bb2540b461b66067396ac0e" kindref="member">exitwave</ref>-&gt;ShapeBlock();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk.z<sp/>=<sp/>batch_size;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim3<sp/>thr<sp/>=<sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a9ebbe9246bb2540b461b66067396ac0e" kindref="member">exitwave</ref>-&gt;ShapeThread();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structROI" kindref="compound">ROI</ref>*<sp/>rois<sp/>=<sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a96bb15bd81f718c72d585c8ed611eab9" kindref="member">rois</ref>[random_pos_idx]-&gt;Ptr(gpu);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cImage*<sp/>probe<sp/>=<sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1aa0bb2bf38b8e6e0126ff0e21fb7203d6" kindref="member">probe</ref>-&gt;arrays[gpu];</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cImage*<sp/>obj<sp/>=<sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a506d977d84492238546e64d7b2f38f01" kindref="member">object</ref>-&gt;arrays[gpu];</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cImage*<sp/>wavefront<sp/>=<sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a9ebbe9246bb2540b461b66067396ac0e" kindref="member">exitwave</ref>-&gt;arrays[gpu];</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rImage*<sp/>difpad<sp/>=<sp/>cur_difpad.arrays[gpu];</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_pie_wavefront_calc&lt;&lt;&lt;blk,<sp/>thr&gt;&gt;&gt;(*wavefront,<sp/>*probe,<sp/>*obj,<sp/>rois);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wavefront-&gt;CopyTo(wavefront_prev);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ptycho_8cu_1ad878deb8a9ac1ae105af1be65e74e3de" kindref="member">project_reciprocal_space</ref>(*pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>,<sp/>difpad,<sp/>gpu,<sp/>pie.<ref refid="structPie_1a36aef3a7ee4e24bdefab937387442d99" kindref="member">isGradPm</ref>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*wavefront<sp/>/=<sp/>float(probeshape.x<sp/>*<sp/>probeshape.y);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>probe_abs2_max<sp/>=<sp/>probe-&gt;maxAbs2();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_pie_update_object&lt;&lt;&lt;blk,<sp/>thr&gt;&gt;&gt;(*obj,<sp/>*probe,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*wavefront,<sp/>wavefront_prev,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a0432e54095f9ef861d69ef7db2020bcc" kindref="member">objreg</ref>,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a28af23f00cd500b58e7145aeb57a16e2" kindref="member">objstep</ref>,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probe_abs2_max,<sp/>rois);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dim3<sp/>pos_offset(pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a756b6b85c939871d321128435a279dfb" kindref="member">cpurois</ref>[random_pos_idx].<ref refid="structROI_1aeeb35d1907fcdd6019624d91a943ea8b" kindref="member">x</ref>,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a756b6b85c939871d321128435a279dfb" kindref="member">cpurois</ref>[random_pos_idx].<ref refid="structROI_1aa1c5dc105fd5f5017fe5b4e1eb471f6a" kindref="member">y</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj-&gt;CopyRoiTo(obj_box,<sp/>pos_offset,<sp/>probeshape);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>obj_abs2_max<sp/>=<sp/>obj_box.maxAbs2();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_pie_update_probe&lt;&lt;&lt;blk,<sp/>thr&gt;&gt;&gt;(obj_box,<sp/>*obj,<sp/>*probe,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*wavefront,<sp/>wavefront_prev,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a84777c02e5be6e5a84906bf7ba0da62a" kindref="member">probereg</ref>,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1ab26d95672cf1bdb420e2edb86df59565" kindref="member">probestep</ref>,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj_abs2_max,<sp/>rois);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1abfd36af46d12deaded7d6ebb8e122242" kindref="member">cpurfact</ref>[iter]<sp/>=<sp/>sqrtf(pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1a7927b2f881d02a9170c59b1e387050ed" kindref="member">rfactors</ref>-&gt;SumCPU());</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>%<sp/>10<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_info(format(</highlight><highlight class="stringliteral">&quot;iter<sp/>{}/{}<sp/>error<sp/>=<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter,<sp/>iterations,<sp/>pie.<ref refid="structPie_1a9c1042be5ded02971640e92ddf44c911" kindref="member">ptycho</ref>-&gt;<ref refid="structPOptAlgorithm_1abfd36af46d12deaded7d6ebb8e122242" kindref="member">cpurfact</ref>[iter]));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_event_stop();<sp/></highlight><highlight class="comment">//<sp/>iter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>time1<sp/>=<sp/>ssc_time();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_info(format(</highlight><highlight class="stringliteral">&quot;End<sp/>PIE<sp/>iteration:<sp/>{}<sp/>ms&quot;</highlight><highlight class="normal">,<sp/>ssc_diff_time(time0,<sp/>time1)));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_event_stop();<sp/><sp/></highlight><highlight class="comment">//<sp/>PieRun</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/pie.cu"/>
  </compounddef>
</doxygen>
