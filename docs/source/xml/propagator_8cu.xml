<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="propagator_8cu" kind="file" language="C++">
    <compoundname>propagator.cu</compoundname>
    <includes refid="propagator_8hpp" local="no">propagator.hpp</includes>
    <incdepgraph>
      <node id="3">
        <label>cufft.h</label>
      </node>
      <node id="2">
        <label>propagator.hpp</label>
        <link refid="propagator_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
      <node id="1">
        <label>/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/propagator.cu</label>
        <link refid="propagator_8cu"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>types.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="propagator_8cu_1ad1d043fd874fabc92bfc14b3b71257fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dim3EQ</definition>
        <argsstring>(const dim3 &amp;d1, const dim3 &amp;d2)</argsstring>
        <name>dim3EQ</name>
        <param>
          <type>const dim3 &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const dim3 &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/propagator.cu" line="39" column="6" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/propagator.cu" bodystart="39" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="propagator_8cu_1a23f2d4c356f6967523fcc57a50a47033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__global__ void</type>
        <definition>__global__ void KApplyASM</definition>
        <argsstring>(complex *wave, float f1, dim3 shape)</argsstring>
        <name>KApplyASM</name>
        <param>
          <type>complex *</type>
          <declname>wave</declname>
        </param>
        <param>
          <type>float</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>dim3</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/propagator.cu" line="72" column="17" bodyfile="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/propagator.cu" bodystart="72" bodyend="85"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="propagator_8hpp" kindref="compound">propagator.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classFraunhoffer_1a03eeacf2d4d7f62043e30eb665e41221" kindref="member">Fraunhoffer::Append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dim3&amp;<sp/>dim)</highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_debug(format(</highlight><highlight class="stringliteral">&quot;Creating<sp/>new<sp/>plan:<sp/>{}<sp/>{}<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>dim.x,<sp/>dim.y,<sp/>dim.z));</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classFraunhoffer_1a7d3e591358abae08be401c85497c7751" kindref="member">workarea</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>dim.x*dim.y*dim.z<sp/>&gt;<sp/><ref refid="classFraunhoffer_1a7d3e591358abae08be401c85497c7751" kindref="member">workarea</ref>-&gt;size)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc_debug(format(</highlight><highlight class="stringliteral">&quot;Reallocating<sp/>plan<sp/>memory<sp/>to<sp/>size:<sp/>{}<sp/>{}<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim.x,<sp/>dim.y,<sp/>dim.z));</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classFraunhoffer_1a7d3e591358abae08be401c85497c7751" kindref="member">workarea</ref>)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="classFraunhoffer_1a7d3e591358abae08be401c85497c7751" kindref="member">workarea</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classFraunhoffer_1a7d3e591358abae08be401c85497c7751" kindref="member">workarea</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>cImage(dim.x,dim.y,dim.z);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>plan<sp/>:<sp/><ref refid="classFraunhoffer_1aee9c993c6551a6d7c26df8e035bc0c27" kindref="member">plans</ref>)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cufftSetWorkArea(plan,<sp/><ref refid="classFraunhoffer_1a7d3e591358abae08be401c85497c7751" kindref="member">workarea</ref>-&gt;gpuptr);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="classFraunhoffer_1a8135fcddf654324f33d7a872925f993a" kindref="member">dims</ref>.size();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classFraunhoffer_1a8135fcddf654324f33d7a872925f993a" kindref="member">dims</ref>.push_back(dim);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n[]<sp/>=<sp/>{(int)dim.x,(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)dim.y};</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftHandle<sp/>newplan;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>worksize;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_cufft_check(<sp/>cufftCreate(&amp;newplan)<sp/>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_cufft_check(<sp/>cufftSetAutoAllocation(newplan,0)<sp/>);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_cufft_check(<sp/>cufftMakePlanMany(newplan,2,n,</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,0,0,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,0,0,CUFFT_C2C,(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)dim.z,&amp;worksize)<sp/>);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_cufft_check(<sp/>cufftSetWorkArea(newplan,<sp/><ref refid="classFraunhoffer_1a7d3e591358abae08be401c85497c7751" kindref="member">workarea</ref>-&gt;gpuptr)<sp/>);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classFraunhoffer_1aee9c993c6551a6d7c26df8e035bc0c27" kindref="member">plans</ref>.push_back(newplan);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_assert(worksize<sp/>&lt;=<sp/>8*workarea-&gt;size,<sp/></highlight><highlight class="stringliteral">&quot;CuFFT<sp/>being<sp/>hungry!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Done.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="propagator_8cu_1ad1d043fd874fabc92bfc14b3b71257fa" kindref="member">dim3EQ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dim3&amp;<sp/>d1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dim3&amp;<sp/>d2){</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d1.x==d2.x<sp/>&amp;&amp;<sp/>d1.y==d2.y<sp/>&amp;&amp;<sp/>d1.z==d2.z;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classFraunhoffer_1a6fbc9cc78fcff2cd1531861f474e83d7" kindref="member">Fraunhoffer::Propagate</ref>(complex*<sp/>owave,<sp/>complex*<sp/>iwave,<sp/>dim3<sp/>shape,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amount)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bPlanExists<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dir<sp/>=<sp/>(amount<sp/>&gt;<sp/>0)<sp/>?<sp/>CUFFT_FORWARD<sp/>:<sp/>CUFFT_INVERSE;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftHandle<sp/>plan;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;<ref refid="classFraunhoffer_1a8135fcddf654324f33d7a872925f993a" kindref="member">dims</ref>.size();<sp/>i++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="propagator_8cu_1ad1d043fd874fabc92bfc14b3b71257fa" kindref="member">dim3EQ</ref>(shape,<ref refid="classFraunhoffer_1a8135fcddf654324f33d7a872925f993a" kindref="member">dims</ref>[i])<sp/>)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bPlanExists<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan<sp/>=<sp/><ref refid="classFraunhoffer_1aee9c993c6551a6d7c26df8e035bc0c27" kindref="member">plans</ref>[i];</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!bPlanExists)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classFraunhoffer_1a03eeacf2d4d7f62043e30eb665e41221" kindref="member">Append</ref>(shape);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan<sp/>=<sp/><ref refid="classFraunhoffer_1aee9c993c6551a6d7c26df8e035bc0c27" kindref="member">plans</ref>[<ref refid="classFraunhoffer_1aee9c993c6551a6d7c26df8e035bc0c27" kindref="member">plans</ref>.size()-1];</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_cufft_check(<sp/><sp/>cufftExecC2C(plan,iwave,owave,dir)<sp/><sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="classFraunhoffer_1af7dd6a16e3011a54af884cb4ee1a6217" kindref="member">Fraunhoffer::~Fraunhoffer</ref>()</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc_debug(</highlight><highlight class="stringliteral">&quot;Deleting<sp/>propagator.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>plan<sp/>:<sp/><ref refid="classFraunhoffer_1aee9c993c6551a6d7c26df8e035bc0c27" kindref="member">plans</ref>)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plan)<sp/>cufftDestroy(plan);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classFraunhoffer_1a7d3e591358abae08be401c85497c7751" kindref="member">workarea</ref>)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="classFraunhoffer_1a7d3e591358abae08be401c85497c7751" kindref="member">workarea</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="propagator_8cu_1a23f2d4c356f6967523fcc57a50a47033" kindref="member">KApplyASM</ref>(complex*<sp/>wave,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f1,<sp/>dim3<sp/>shape)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>threadIdx.x<sp/>+<sp/>blockIdx.x<sp/>*<sp/>blockDim.x;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idy<sp/>=<sp/>blockIdx.y;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idz<sp/>=<sp/>blockIdx.z;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(idx<sp/>&gt;=<sp/>shape.x)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xx<sp/>=<sp/>float(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(idx+shape.x/2)%</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(shape.x)<sp/>)/float(shape.x)<sp/>-<sp/>0.5f;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yy<sp/>=<sp/>float(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(idy+shape.y/2)%</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(shape.y)<sp/>)/float(shape.y)<sp/>-<sp/>0.5f;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>wave[idz*shape.x*shape.y<sp/>+<sp/>idy*shape.x<sp/>+<sp/>idx]<sp/>*=<sp/>complex::exp1j(<sp/>-</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(M_PI)/f1<sp/>*<sp/>(xx*xx<sp/>+<sp/>yy*yy)<sp/>)<sp/>/<sp/>float(shape.x*shape.y);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classASM_1a736856045f336def50793eb25109bb87" kindref="member">ASM::Propagate</ref>(complex*<sp/>owave,<sp/>complex*<sp/>iwave,<sp/>dim3<sp/>shape,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amount)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classFraunhoffer_1a6fbc9cc78fcff2cd1531861f474e83d7" kindref="member">Fraunhoffer::Propagate</ref>(owave,iwave,shape,1);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="propagator_8cu_1a23f2d4c356f6967523fcc57a50a47033" kindref="member">KApplyASM</ref>&lt;&lt;&lt;dim3((shape.x+127)/128,shape.y,shape.z),dim3(128,1,1)&gt;&gt;&gt;(owave,<sp/>amount,<sp/>shape);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classFraunhoffer_1a6fbc9cc78fcff2cd1531861f474e83d7" kindref="member">Fraunhoffer::Propagate</ref>(owave,owave,shape,-1);</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/ibira/lnls/labs/tepui/home/yuri.tonin/ssc-cdi/cuda/src/propagator.cu"/>
  </compounddef>
</doxygen>
